/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
	"time"
)

// Postcard struct for Postcard
type Postcard struct {
	// Unique identifier prefixed with `psc_`.
	Id string `json:"id"`
	To *Address `json:"to,omitempty"`
	From *AddressDomesticExpanded `json:"from,omitempty"`
	Carrier *string `json:"carrier,omitempty"`
	Thumbnails []Thumbnail `json:"thumbnails,omitempty"`
	Size *PostcardSize `json:"size,omitempty"`
	// A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its `send_date`.
	ExpectedDeliveryDate *string `json:"expected_delivery_date,omitempty"`
	// A timestamp in ISO 8601 format of the date the resource was created.
	DateCreated *time.Time `json:"date_created,omitempty"`
	// A timestamp in ISO 8601 format of the date the resource was last modified.
	DateModified *time.Time `json:"date_modified,omitempty"`
	// Only returned if the resource has been successfully deleted.
	Deleted *bool `json:"deleted,omitempty"`
	// The unique ID of the HTML template used for the front of the postcard.
	FrontTemplateId NullableString `json:"front_template_id,omitempty"`
	// The unique ID of the HTML template used for the back of the postcard.
	BackTemplateId NullableString `json:"back_template_id,omitempty"`
	// The unique ID of the specific version of the HTML template used for the front of the postcard.
	FrontTemplateVersionId NullableString `json:"front_template_version_id,omitempty"`
	// The unique ID of the specific version of the HTML template used for the back of the postcard.
	BackTemplateVersionId NullableString `json:"back_template_version_id,omitempty"`
	// An array of tracking_event objects ordered by ascending `time`. Will not be populated for postcards created in test mode.
	TrackingEvents []TrackingEventNormal `json:"tracking_events,omitempty"`
	Object *string `json:"object,omitempty"`
	// A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.
	Url string `json:"url"`
	// An internal description that identifies this resource. Must be no longer than 255 characters. 
	Description NullableString `json:"description,omitempty"`
	// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters `\"` and `\\`. i.e. '{\"customer_id\" : \"NEWYORK2015\"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
	Metadata *map[string]string `json:"metadata,omitempty"`
	MailType *MailType `json:"mail_type,omitempty"`
	// You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: `{{variable_name}}`, pass in `{\"variable_name\": \"Harry\"}` to render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: `!`, `\"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `<`, `=`, `>`, `@`, `[`, `\\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string.
	MergeVariables map[string]interface{} `json:"merge_variables,omitempty"`
	// A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the `send_date` has passed, the mailpiece can be canceled. If a date in the format `2017-11-01` is passed, it will evaluate to midnight UTC of that date (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a time zone will be converted to UTC.
	SendDate *time.Time `json:"send_date,omitempty"`
}

// NewPostcard instantiates a new Postcard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostcard(id string, url string) *Postcard {
	this := Postcard{}
	this.Id = id
	var carrier string = "USPS"
	this.Carrier = &carrier
	var size PostcardSize = POSTCARDSIZE__4X6
	this.Size = &size
	var object string = "postcard"
	this.Object = &object
	this.Url = url
	var mailType MailType = MAILTYPE_FIRST_CLASS
	this.MailType = &mailType
	return &this
}

// NewPostcardWithDefaults instantiates a new Postcard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostcardWithDefaults() *Postcard {
	this := Postcard{}
	var carrier string = "USPS"
	this.Carrier = &carrier
	var size PostcardSize = POSTCARDSIZE__4X6
	this.Size = &size
	var object string = "postcard"
	this.Object = &object
	var mailType MailType = MAILTYPE_FIRST_CLASS
	this.MailType = &mailType
	return &this
}

// GetId returns the Id field value
func (o *Postcard) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Postcard) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Postcard) SetId(v string) {
	o.Id = v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *Postcard) GetTo() Address {
	if o == nil || o.To == nil {
		var ret Address
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetToOk() (*Address, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *Postcard) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given Address and assigns it to the To field.
func (o *Postcard) SetTo(v Address) {
	o.To = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *Postcard) GetFrom() AddressDomesticExpanded {
	if o == nil || o.From == nil {
		var ret AddressDomesticExpanded
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetFromOk() (*AddressDomesticExpanded, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *Postcard) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given AddressDomesticExpanded and assigns it to the From field.
func (o *Postcard) SetFrom(v AddressDomesticExpanded) {
	o.From = &v
}

// GetCarrier returns the Carrier field value if set, zero value otherwise.
func (o *Postcard) GetCarrier() string {
	if o == nil || o.Carrier == nil {
		var ret string
		return ret
	}
	return *o.Carrier
}

// GetCarrierOk returns a tuple with the Carrier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetCarrierOk() (*string, bool) {
	if o == nil || o.Carrier == nil {
		return nil, false
	}
	return o.Carrier, true
}

// HasCarrier returns a boolean if a field has been set.
func (o *Postcard) HasCarrier() bool {
	if o != nil && o.Carrier != nil {
		return true
	}

	return false
}

// SetCarrier gets a reference to the given string and assigns it to the Carrier field.
func (o *Postcard) SetCarrier(v string) {
	o.Carrier = &v
}

// GetThumbnails returns the Thumbnails field value if set, zero value otherwise.
func (o *Postcard) GetThumbnails() []Thumbnail {
	if o == nil || o.Thumbnails == nil {
		var ret []Thumbnail
		return ret
	}
	return o.Thumbnails
}

// GetThumbnailsOk returns a tuple with the Thumbnails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetThumbnailsOk() ([]Thumbnail, bool) {
	if o == nil || o.Thumbnails == nil {
		return nil, false
	}
	return o.Thumbnails, true
}

// HasThumbnails returns a boolean if a field has been set.
func (o *Postcard) HasThumbnails() bool {
	if o != nil && o.Thumbnails != nil {
		return true
	}

	return false
}

// SetThumbnails gets a reference to the given []Thumbnail and assigns it to the Thumbnails field.
func (o *Postcard) SetThumbnails(v []Thumbnail) {
	o.Thumbnails = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Postcard) GetSize() PostcardSize {
	if o == nil || o.Size == nil {
		var ret PostcardSize
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetSizeOk() (*PostcardSize, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Postcard) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given PostcardSize and assigns it to the Size field.
func (o *Postcard) SetSize(v PostcardSize) {
	o.Size = &v
}

// GetExpectedDeliveryDate returns the ExpectedDeliveryDate field value if set, zero value otherwise.
func (o *Postcard) GetExpectedDeliveryDate() string {
	if o == nil || o.ExpectedDeliveryDate == nil {
		var ret string
		return ret
	}
	return *o.ExpectedDeliveryDate
}

// GetExpectedDeliveryDateOk returns a tuple with the ExpectedDeliveryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetExpectedDeliveryDateOk() (*string, bool) {
	if o == nil || o.ExpectedDeliveryDate == nil {
		return nil, false
	}
	return o.ExpectedDeliveryDate, true
}

// HasExpectedDeliveryDate returns a boolean if a field has been set.
func (o *Postcard) HasExpectedDeliveryDate() bool {
	if o != nil && o.ExpectedDeliveryDate != nil {
		return true
	}

	return false
}

// SetExpectedDeliveryDate gets a reference to the given string and assigns it to the ExpectedDeliveryDate field.
func (o *Postcard) SetExpectedDeliveryDate(v string) {
	o.ExpectedDeliveryDate = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Postcard) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Postcard) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Postcard) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetDateModified returns the DateModified field value if set, zero value otherwise.
func (o *Postcard) GetDateModified() time.Time {
	if o == nil || o.DateModified == nil {
		var ret time.Time
		return ret
	}
	return *o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetDateModifiedOk() (*time.Time, bool) {
	if o == nil || o.DateModified == nil {
		return nil, false
	}
	return o.DateModified, true
}

// HasDateModified returns a boolean if a field has been set.
func (o *Postcard) HasDateModified() bool {
	if o != nil && o.DateModified != nil {
		return true
	}

	return false
}

// SetDateModified gets a reference to the given time.Time and assigns it to the DateModified field.
func (o *Postcard) SetDateModified(v time.Time) {
	o.DateModified = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Postcard) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Postcard) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Postcard) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetFrontTemplateId returns the FrontTemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Postcard) GetFrontTemplateId() string {
	if o == nil || o.FrontTemplateId.Get() == nil {
		var ret string
		return ret
	}
	return *o.FrontTemplateId.Get()
}

// GetFrontTemplateIdOk returns a tuple with the FrontTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Postcard) GetFrontTemplateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FrontTemplateId.Get(), o.FrontTemplateId.IsSet()
}

// HasFrontTemplateId returns a boolean if a field has been set.
func (o *Postcard) HasFrontTemplateId() bool {
	if o != nil && o.FrontTemplateId.IsSet() {
		return true
	}

	return false
}

// SetFrontTemplateId gets a reference to the given NullableString and assigns it to the FrontTemplateId field.
func (o *Postcard) SetFrontTemplateId(v string) {
	o.FrontTemplateId.Set(&v)
}
// SetFrontTemplateIdNil sets the value for FrontTemplateId to be an explicit nil
func (o *Postcard) SetFrontTemplateIdNil() {
	o.FrontTemplateId.Set(nil)
}

// UnsetFrontTemplateId ensures that no value is present for FrontTemplateId, not even an explicit nil
func (o *Postcard) UnsetFrontTemplateId() {
	o.FrontTemplateId.Unset()
}

// GetBackTemplateId returns the BackTemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Postcard) GetBackTemplateId() string {
	if o == nil || o.BackTemplateId.Get() == nil {
		var ret string
		return ret
	}
	return *o.BackTemplateId.Get()
}

// GetBackTemplateIdOk returns a tuple with the BackTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Postcard) GetBackTemplateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackTemplateId.Get(), o.BackTemplateId.IsSet()
}

// HasBackTemplateId returns a boolean if a field has been set.
func (o *Postcard) HasBackTemplateId() bool {
	if o != nil && o.BackTemplateId.IsSet() {
		return true
	}

	return false
}

// SetBackTemplateId gets a reference to the given NullableString and assigns it to the BackTemplateId field.
func (o *Postcard) SetBackTemplateId(v string) {
	o.BackTemplateId.Set(&v)
}
// SetBackTemplateIdNil sets the value for BackTemplateId to be an explicit nil
func (o *Postcard) SetBackTemplateIdNil() {
	o.BackTemplateId.Set(nil)
}

// UnsetBackTemplateId ensures that no value is present for BackTemplateId, not even an explicit nil
func (o *Postcard) UnsetBackTemplateId() {
	o.BackTemplateId.Unset()
}

// GetFrontTemplateVersionId returns the FrontTemplateVersionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Postcard) GetFrontTemplateVersionId() string {
	if o == nil || o.FrontTemplateVersionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.FrontTemplateVersionId.Get()
}

// GetFrontTemplateVersionIdOk returns a tuple with the FrontTemplateVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Postcard) GetFrontTemplateVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FrontTemplateVersionId.Get(), o.FrontTemplateVersionId.IsSet()
}

// HasFrontTemplateVersionId returns a boolean if a field has been set.
func (o *Postcard) HasFrontTemplateVersionId() bool {
	if o != nil && o.FrontTemplateVersionId.IsSet() {
		return true
	}

	return false
}

// SetFrontTemplateVersionId gets a reference to the given NullableString and assigns it to the FrontTemplateVersionId field.
func (o *Postcard) SetFrontTemplateVersionId(v string) {
	o.FrontTemplateVersionId.Set(&v)
}
// SetFrontTemplateVersionIdNil sets the value for FrontTemplateVersionId to be an explicit nil
func (o *Postcard) SetFrontTemplateVersionIdNil() {
	o.FrontTemplateVersionId.Set(nil)
}

// UnsetFrontTemplateVersionId ensures that no value is present for FrontTemplateVersionId, not even an explicit nil
func (o *Postcard) UnsetFrontTemplateVersionId() {
	o.FrontTemplateVersionId.Unset()
}

// GetBackTemplateVersionId returns the BackTemplateVersionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Postcard) GetBackTemplateVersionId() string {
	if o == nil || o.BackTemplateVersionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.BackTemplateVersionId.Get()
}

// GetBackTemplateVersionIdOk returns a tuple with the BackTemplateVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Postcard) GetBackTemplateVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackTemplateVersionId.Get(), o.BackTemplateVersionId.IsSet()
}

// HasBackTemplateVersionId returns a boolean if a field has been set.
func (o *Postcard) HasBackTemplateVersionId() bool {
	if o != nil && o.BackTemplateVersionId.IsSet() {
		return true
	}

	return false
}

// SetBackTemplateVersionId gets a reference to the given NullableString and assigns it to the BackTemplateVersionId field.
func (o *Postcard) SetBackTemplateVersionId(v string) {
	o.BackTemplateVersionId.Set(&v)
}
// SetBackTemplateVersionIdNil sets the value for BackTemplateVersionId to be an explicit nil
func (o *Postcard) SetBackTemplateVersionIdNil() {
	o.BackTemplateVersionId.Set(nil)
}

// UnsetBackTemplateVersionId ensures that no value is present for BackTemplateVersionId, not even an explicit nil
func (o *Postcard) UnsetBackTemplateVersionId() {
	o.BackTemplateVersionId.Unset()
}

// GetTrackingEvents returns the TrackingEvents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Postcard) GetTrackingEvents() []TrackingEventNormal {
	if o == nil {
		var ret []TrackingEventNormal
		return ret
	}
	return o.TrackingEvents
}

// GetTrackingEventsOk returns a tuple with the TrackingEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Postcard) GetTrackingEventsOk() ([]TrackingEventNormal, bool) {
	if o == nil || o.TrackingEvents == nil {
		return nil, false
	}
	return o.TrackingEvents, true
}

// HasTrackingEvents returns a boolean if a field has been set.
func (o *Postcard) HasTrackingEvents() bool {
	if o != nil && o.TrackingEvents != nil {
		return true
	}

	return false
}

// SetTrackingEvents gets a reference to the given []TrackingEventNormal and assigns it to the TrackingEvents field.
func (o *Postcard) SetTrackingEvents(v []TrackingEventNormal) {
	o.TrackingEvents = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *Postcard) GetObject() string {
	if o == nil || o.Object == nil {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetObjectOk() (*string, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *Postcard) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *Postcard) SetObject(v string) {
	o.Object = &v
}

// GetUrl returns the Url field value
func (o *Postcard) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Postcard) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Postcard) SetUrl(v string) {
	o.Url = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Postcard) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Postcard) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Postcard) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Postcard) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Postcard) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Postcard) UnsetDescription() {
	o.Description.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Postcard) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Postcard) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Postcard) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetMailType returns the MailType field value if set, zero value otherwise.
func (o *Postcard) GetMailType() MailType {
	if o == nil || o.MailType == nil {
		var ret MailType
		return ret
	}
	return *o.MailType
}

// GetMailTypeOk returns a tuple with the MailType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetMailTypeOk() (*MailType, bool) {
	if o == nil || o.MailType == nil {
		return nil, false
	}
	return o.MailType, true
}

// HasMailType returns a boolean if a field has been set.
func (o *Postcard) HasMailType() bool {
	if o != nil && o.MailType != nil {
		return true
	}

	return false
}

// SetMailType gets a reference to the given MailType and assigns it to the MailType field.
func (o *Postcard) SetMailType(v MailType) {
	o.MailType = &v
}

// GetMergeVariables returns the MergeVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Postcard) GetMergeVariables() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.MergeVariables
}

// GetMergeVariablesOk returns a tuple with the MergeVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Postcard) GetMergeVariablesOk() (map[string]interface{}, bool) {
	if o == nil || o.MergeVariables == nil {
		return nil, false
	}
	return o.MergeVariables, true
}

// HasMergeVariables returns a boolean if a field has been set.
func (o *Postcard) HasMergeVariables() bool {
	if o != nil && o.MergeVariables != nil {
		return true
	}

	return false
}

// SetMergeVariables gets a reference to the given map[string]interface{} and assigns it to the MergeVariables field.
func (o *Postcard) SetMergeVariables(v map[string]interface{}) {
	o.MergeVariables = v
}

// GetSendDate returns the SendDate field value if set, zero value otherwise.
func (o *Postcard) GetSendDate() time.Time {
	if o == nil || o.SendDate == nil {
		var ret time.Time
		return ret
	}
	return *o.SendDate
}

// GetSendDateOk returns a tuple with the SendDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Postcard) GetSendDateOk() (*time.Time, bool) {
	if o == nil || o.SendDate == nil {
		return nil, false
	}
	return o.SendDate, true
}

// HasSendDate returns a boolean if a field has been set.
func (o *Postcard) HasSendDate() bool {
	if o != nil && o.SendDate != nil {
		return true
	}

	return false
}

// SetSendDate gets a reference to the given time.Time and assigns it to the SendDate field.
func (o *Postcard) SetSendDate(v time.Time) {
	o.SendDate = &v
}

func (o Postcard) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.Carrier != nil {
		toSerialize["carrier"] = o.Carrier
	}
	if o.Thumbnails != nil {
		toSerialize["thumbnails"] = o.Thumbnails
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.ExpectedDeliveryDate != nil {
		toSerialize["expected_delivery_date"] = o.ExpectedDeliveryDate
	}
	if o.DateCreated != nil {
		toSerialize["date_created"] = o.DateCreated
	}
	if o.DateModified != nil {
		toSerialize["date_modified"] = o.DateModified
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.FrontTemplateId.IsSet() {
		toSerialize["front_template_id"] = o.FrontTemplateId.Get()
	}
	if o.BackTemplateId.IsSet() {
		toSerialize["back_template_id"] = o.BackTemplateId.Get()
	}
	if o.FrontTemplateVersionId.IsSet() {
		toSerialize["front_template_version_id"] = o.FrontTemplateVersionId.Get()
	}
	if o.BackTemplateVersionId.IsSet() {
		toSerialize["back_template_version_id"] = o.BackTemplateVersionId.Get()
	}
	if o.TrackingEvents != nil {
		toSerialize["tracking_events"] = o.TrackingEvents
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.MailType != nil {
		toSerialize["mail_type"] = o.MailType
	}
	if o.MergeVariables != nil {
		toSerialize["merge_variables"] = o.MergeVariables
	}
	if o.SendDate != nil {
		toSerialize["send_date"] = o.SendDate
	}
	return json.Marshal(toSerialize)
}

type NullablePostcard struct {
	value *Postcard
	isSet bool
}

func (v NullablePostcard) Get() *Postcard {
	return v.value
}

func (v *NullablePostcard) Set(val *Postcard) {
	v.value = val
	v.isSet = true
}

func (v NullablePostcard) IsSet() bool {
	return v.isSet
}

func (v *NullablePostcard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostcard(val *Postcard) *NullablePostcard {
	return &NullablePostcard{value: val, isSet: true}
}

func (v NullablePostcard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostcard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


