/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
)

// GeocodeAddresses struct for GeocodeAddresses
type GeocodeAddresses struct {
	Components *GeocodeComponents `json:"components,omitempty"`
	LocationAnalysis *LocationAnalysis `json:"location_analysis,omitempty"`
}

// NewGeocodeAddresses instantiates a new GeocodeAddresses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeocodeAddresses() *GeocodeAddresses {
	this := GeocodeAddresses{}
	return &this
}

// NewGeocodeAddressesWithDefaults instantiates a new GeocodeAddresses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeocodeAddressesWithDefaults() *GeocodeAddresses {
	this := GeocodeAddresses{}
	return &this
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *GeocodeAddresses) GetComponents() GeocodeComponents {
	if o == nil || o.Components == nil {
		var ret GeocodeComponents
		return ret
	}
	return *o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodeAddresses) GetComponentsOk() (*GeocodeComponents, bool) {
	if o == nil || o.Components == nil {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *GeocodeAddresses) HasComponents() bool {
	if o != nil && o.Components != nil {
		return true
	}

	return false
}

// SetComponents gets a reference to the given GeocodeComponents and assigns it to the Components field.
func (o *GeocodeAddresses) SetComponents(v GeocodeComponents) {
	o.Components = &v
}

// GetLocationAnalysis returns the LocationAnalysis field value if set, zero value otherwise.
func (o *GeocodeAddresses) GetLocationAnalysis() LocationAnalysis {
	if o == nil || o.LocationAnalysis == nil {
		var ret LocationAnalysis
		return ret
	}
	return *o.LocationAnalysis
}

// GetLocationAnalysisOk returns a tuple with the LocationAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodeAddresses) GetLocationAnalysisOk() (*LocationAnalysis, bool) {
	if o == nil || o.LocationAnalysis == nil {
		return nil, false
	}
	return o.LocationAnalysis, true
}

// HasLocationAnalysis returns a boolean if a field has been set.
func (o *GeocodeAddresses) HasLocationAnalysis() bool {
	if o != nil && o.LocationAnalysis != nil {
		return true
	}

	return false
}

// SetLocationAnalysis gets a reference to the given LocationAnalysis and assigns it to the LocationAnalysis field.
func (o *GeocodeAddresses) SetLocationAnalysis(v LocationAnalysis) {
	o.LocationAnalysis = &v
}

func (o GeocodeAddresses) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Components != nil {
		toSerialize["components"] = o.Components
	}
	if o.LocationAnalysis != nil {
		toSerialize["location_analysis"] = o.LocationAnalysis
	}
	return json.Marshal(toSerialize)
}

type NullableGeocodeAddresses struct {
	value *GeocodeAddresses
	isSet bool
}

func (v NullableGeocodeAddresses) Get() *GeocodeAddresses {
	return v.value
}

func (v *NullableGeocodeAddresses) Set(val *GeocodeAddresses) {
	v.value = val
	v.isSet = true
}

func (v NullableGeocodeAddresses) IsSet() bool {
	return v.isSet
}

func (v *NullableGeocodeAddresses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeocodeAddresses(val *GeocodeAddresses) *NullableGeocodeAddresses {
	return &NullableGeocodeAddresses{value: val, isSet: true}
}

func (v NullableGeocodeAddresses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeocodeAddresses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


