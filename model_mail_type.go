/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	"fmt"
)

// MailType A string designating the mail postage type: * `usps_first_class` - (default) * `usps_standard` - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. `usps_standard` cannot be used with `4x6` postcards or for any postcards sent outside of the United States. 
type MailType string

// List of mail_type
const (
	MAILTYPE_FIRST_CLASS MailType = "usps_first_class"
	MAILTYPE_STANDARD MailType = "usps_standard"
)

// All allowed values of MailType enum
var AllowedMailTypeEnumValues = []MailType{
	"usps_first_class",
	"usps_standard",
}

func (v *MailType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MailType(value)
	for _, existing := range AllowedMailTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MailType", value)
}

// NewMailTypeFromValue returns a pointer to a valid MailType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMailTypeFromValue(v string) (*MailType, error) {
	ev := MailType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MailType: valid values are %v", v, AllowedMailTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MailType) IsValid() bool {
	for _, existing := range AllowedMailTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to mail_type value
func (v MailType) Ptr() *MailType {
	return &v
}

type NullableMailType struct {
	value *MailType
	isSet bool
}

func (v NullableMailType) Get() *MailType {
	return v.value
}

func (v *NullableMailType) Set(val *MailType) {
	v.value = val
	v.isSet = true
}

func (v NullableMailType) IsSet() bool {
	return v.isSet
}

func (v *NullableMailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailType(val *MailType) *NullableMailType {
	return &NullableMailType{value: val, isSet: true}
}

func (v NullableMailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

