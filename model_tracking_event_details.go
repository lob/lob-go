/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
)

// TrackingEventDetails struct for TrackingEventDetails
type TrackingEventDetails struct {
	// Find the full table [here](#tag/Tracking-Events). A detailed substatus about the event: * `package_accepted` - Package has been accepted into the carrier network for delivery. * `package_arrived` - Package has arrived at an intermediate location in the carrier network. * `package_departed` - Package has departed from an intermediate location in the carrier network. * `package_processing` - Package is processing at an intermediate location in the carrier network. * `package_processed` - Package has been processed at an intermediate location. * `package_in_local_area` - Package is at a location near the end destination. * `delivery_scheduled` - Package is scheduled for delivery. * `out_for_delivery` - Package is out for delivery. * `pickup_available` - Package is available for pickup at carrier location. * `delivered` - Package has been delivered. * `package_forwarded` - Package has been forwarded. * `returned_to_sender` - Package is to be returned to sender. * `address_issue` - Address information is incorrect. Contact carrier to ensure delivery. * `contact_carrier` - Contact the carrier for more information. * `delayed` - Delivery of package is delayed. * `delivery_attempted` - Delivery of package has been attempted. Contact carrier to ensure delivery. * `delivery_rescheduled` - Delivery of package has been rescheduled. * `location_inaccessible` - Delivery location inaccessible to carrier. Contact carrier to ensure delivery. * `notice_left` - Carrier left notice during attempted delivery. Follow carrier instructions on notice. * `package_damaged` - Package has been damaged. Contact carrier for more details. * `package_disposed` - Package has been disposed. * `package_held` - Package held at carrier location. Contact carrier for more details. * `package_lost` - Package has been lost. Contact carrier for more details. * `package_unclaimed` - Package is unclaimed. * `package_undeliverable` - Package is not able to be delivered. * `reschedule_delivery` - Contact carrier to reschedule delivery. * `other` - Unrecognized carrier status. 
	Event string `json:"event"`
	// The description as listed in the description for event.
	Description string `json:"description"`
	// Event-specific notes from USPS about the tracking event.
	Notes *string `json:"notes,omitempty"`
	// `true` if action is required by the end recipient, `false` otherwise. 
	ActionRequired bool `json:"action_required"`
}

// NewTrackingEventDetails instantiates a new TrackingEventDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackingEventDetails(event string, description string, actionRequired bool) *TrackingEventDetails {
	this := TrackingEventDetails{}
	this.Event = event
	this.Description = description
	this.ActionRequired = actionRequired
	return &this
}

// NewTrackingEventDetailsWithDefaults instantiates a new TrackingEventDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackingEventDetailsWithDefaults() *TrackingEventDetails {
	this := TrackingEventDetails{}
	return &this
}

// GetEvent returns the Event field value
func (o *TrackingEventDetails) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *TrackingEventDetails) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *TrackingEventDetails) SetEvent(v string) {
	o.Event = v
}

// GetDescription returns the Description field value
func (o *TrackingEventDetails) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TrackingEventDetails) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TrackingEventDetails) SetDescription(v string) {
	o.Description = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TrackingEventDetails) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventDetails) GetNotesOk() (*string, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TrackingEventDetails) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *TrackingEventDetails) SetNotes(v string) {
	o.Notes = &v
}

// GetActionRequired returns the ActionRequired field value
func (o *TrackingEventDetails) GetActionRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ActionRequired
}

// GetActionRequiredOk returns a tuple with the ActionRequired field value
// and a boolean to check if the value has been set.
func (o *TrackingEventDetails) GetActionRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionRequired, true
}

// SetActionRequired sets field value
func (o *TrackingEventDetails) SetActionRequired(v bool) {
	o.ActionRequired = v
}

func (o TrackingEventDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	if true {
		toSerialize["action_required"] = o.ActionRequired
	}
	return json.Marshal(toSerialize)
}

type NullableTrackingEventDetails struct {
	value *TrackingEventDetails
	isSet bool
}

func (v NullableTrackingEventDetails) Get() *TrackingEventDetails {
	return v.value
}

func (v *NullableTrackingEventDetails) Set(val *TrackingEventDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackingEventDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackingEventDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackingEventDetails(val *TrackingEventDetails) *NullableTrackingEventDetails {
	return &NullableTrackingEventDetails{value: val, isSet: true}
}

func (v NullableTrackingEventDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackingEventDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


