/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
	"fmt"
)

// LtrUseType The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type is only allowed if an account default use_type is selected in Account Settings. For more information on use_type, see our  [Help Center article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
type LtrUseType string

// List of ltr_use_type
const (
	LTRUSETYPE_MARKETING LtrUseType = "marketing"
	LTRUSETYPE_OPERATIONAL LtrUseType = "operational"
	LTRUSETYPE_NULL LtrUseType = "null"
)

// All allowed values of LtrUseType enum
var AllowedLtrUseTypeEnumValues = []LtrUseType{
	"marketing",
	"operational",
	"null",
}

func (v *LtrUseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LtrUseType(value)
	for _, existing := range AllowedLtrUseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LtrUseType", value)
}

// NewLtrUseTypeFromValue returns a pointer to a valid LtrUseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLtrUseTypeFromValue(v string) (*LtrUseType, error) {
	ev := LtrUseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LtrUseType: valid values are %v", v, AllowedLtrUseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LtrUseType) IsValid() bool {
	for _, existing := range AllowedLtrUseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ltr_use_type value
func (v LtrUseType) Ptr() *LtrUseType {
	return &v
}

type NullableLtrUseType struct {
	value *LtrUseType
	isSet bool
}

func (v NullableLtrUseType) Get() *LtrUseType {
	return v.value
}

func (v *NullableLtrUseType) Set(val *LtrUseType) {
	v.value = val
	v.isSet = true
}

func (v NullableLtrUseType) IsSet() bool {
	return v.isSet
}

func (v *NullableLtrUseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLtrUseType(val *LtrUseType) *NullableLtrUseType {
	return &NullableLtrUseType{value: val, isSet: true}
}

func (v NullableLtrUseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLtrUseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

