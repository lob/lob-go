/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
)

// CheckList struct for CheckList
type CheckList struct {
	// list of checks
	Data []Check `json:"data,omitempty"`
	// Value is type of resource.
	Object *string `json:"object,omitempty"`
	// url of next page of items in list.
	NextUrl NullableString `json:"next_url,omitempty"`
	// url of previous page of items in list.
	PreviousUrl NullableString `json:"previous_url,omitempty"`
	// number of resources in a set
	Count *int32 `json:"count,omitempty"`
	// indicates the total number of records. Provided when the request specifies an \"include\" query parameter
	TotalCount *int32 `json:"total_count,omitempty"`
}

// NewCheckList instantiates a new CheckList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckList() *CheckList {
	this := CheckList{}
	return &this
}

// NewCheckListWithDefaults instantiates a new CheckList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckListWithDefaults() *CheckList {
	this := CheckList{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CheckList) GetData() []Check {
	if o == nil || o.Data == nil {
		var ret []Check
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckList) GetDataOk() ([]Check, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CheckList) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []Check and assigns it to the Data field.
func (o *CheckList) SetData(v []Check) {
	o.Data = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *CheckList) GetObject() string {
	if o == nil || o.Object == nil {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckList) GetObjectOk() (*string, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *CheckList) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *CheckList) SetObject(v string) {
	o.Object = &v
}

// GetNextUrl returns the NextUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckList) GetNextUrl() string {
	if o == nil || o.NextUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.NextUrl.Get()
}

// GetNextUrlOk returns a tuple with the NextUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckList) GetNextUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextUrl.Get(), o.NextUrl.IsSet()
}

// HasNextUrl returns a boolean if a field has been set.
func (o *CheckList) HasNextUrl() bool {
	if o != nil && o.NextUrl.IsSet() {
		return true
	}

	return false
}

// SetNextUrl gets a reference to the given NullableString and assigns it to the NextUrl field.
func (o *CheckList) SetNextUrl(v string) {
	o.NextUrl.Set(&v)
}
// SetNextUrlNil sets the value for NextUrl to be an explicit nil
func (o *CheckList) SetNextUrlNil() {
	o.NextUrl.Set(nil)
}

// UnsetNextUrl ensures that no value is present for NextUrl, not even an explicit nil
func (o *CheckList) UnsetNextUrl() {
	o.NextUrl.Unset()
}

// GetPreviousUrl returns the PreviousUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckList) GetPreviousUrl() string {
	if o == nil || o.PreviousUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.PreviousUrl.Get()
}

// GetPreviousUrlOk returns a tuple with the PreviousUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckList) GetPreviousUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreviousUrl.Get(), o.PreviousUrl.IsSet()
}

// HasPreviousUrl returns a boolean if a field has been set.
func (o *CheckList) HasPreviousUrl() bool {
	if o != nil && o.PreviousUrl.IsSet() {
		return true
	}

	return false
}

// SetPreviousUrl gets a reference to the given NullableString and assigns it to the PreviousUrl field.
func (o *CheckList) SetPreviousUrl(v string) {
	o.PreviousUrl.Set(&v)
}
// SetPreviousUrlNil sets the value for PreviousUrl to be an explicit nil
func (o *CheckList) SetPreviousUrlNil() {
	o.PreviousUrl.Set(nil)
}

// UnsetPreviousUrl ensures that no value is present for PreviousUrl, not even an explicit nil
func (o *CheckList) UnsetPreviousUrl() {
	o.PreviousUrl.Unset()
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *CheckList) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckList) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *CheckList) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *CheckList) SetCount(v int32) {
	o.Count = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *CheckList) GetTotalCount() int32 {
	if o == nil || o.TotalCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckList) GetTotalCountOk() (*int32, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *CheckList) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *CheckList) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o CheckList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	if o.NextUrl.IsSet() {
		toSerialize["next_url"] = o.NextUrl.Get()
	}
	if o.PreviousUrl.IsSet() {
		toSerialize["previous_url"] = o.PreviousUrl.Get()
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.TotalCount != nil {
		toSerialize["total_count"] = o.TotalCount
	}
	return json.Marshal(toSerialize)
}

type NullableCheckList struct {
	value *CheckList
	isSet bool
}

func (v NullableCheckList) Get() *CheckList {
	return v.value
}

func (v *NullableCheckList) Set(val *CheckList) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckList) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckList(val *CheckList) *NullableCheckList {
	return &NullableCheckList{value: val, isSet: true}
}

func (v NullableCheckList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


