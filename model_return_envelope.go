/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
)

// ReturnEnvelope struct for ReturnEnvelope
type ReturnEnvelope struct {
	// The unique ID of the Return Envelope
	Id *string `json:"id,omitempty"`
	// A quick reference name for the Return Envelope
	Alias *string `json:"alias,omitempty"`
	// The url of the  return envelope
	Url *string `json:"url,omitempty"`
	Object *string `json:"object,omitempty"`
}

// NewReturnEnvelope instantiates a new ReturnEnvelope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnEnvelope() *ReturnEnvelope {
	this := ReturnEnvelope{}
	return &this
}

// NewReturnEnvelopeWithDefaults instantiates a new ReturnEnvelope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnEnvelopeWithDefaults() *ReturnEnvelope {
	this := ReturnEnvelope{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReturnEnvelope) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnEnvelope) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReturnEnvelope) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReturnEnvelope) SetId(v string) {
	o.Id = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *ReturnEnvelope) GetAlias() string {
	if o == nil || o.Alias == nil {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnEnvelope) GetAliasOk() (*string, bool) {
	if o == nil || o.Alias == nil {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *ReturnEnvelope) HasAlias() bool {
	if o != nil && o.Alias != nil {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *ReturnEnvelope) SetAlias(v string) {
	o.Alias = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ReturnEnvelope) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnEnvelope) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ReturnEnvelope) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ReturnEnvelope) SetUrl(v string) {
	o.Url = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ReturnEnvelope) GetObject() string {
	if o == nil || o.Object == nil {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnEnvelope) GetObjectOk() (*string, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ReturnEnvelope) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *ReturnEnvelope) SetObject(v string) {
	o.Object = &v
}

func (o ReturnEnvelope) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Alias != nil {
		toSerialize["alias"] = o.Alias
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	return json.Marshal(toSerialize)
}

type NullableReturnEnvelope struct {
	value *ReturnEnvelope
	isSet bool
}

func (v NullableReturnEnvelope) Get() *ReturnEnvelope {
	return v.value
}

func (v *NullableReturnEnvelope) Set(val *ReturnEnvelope) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnEnvelope) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnEnvelope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnEnvelope(val *ReturnEnvelope) *NullableReturnEnvelope {
	return &NullableReturnEnvelope{value: val, isSet: true}
}

func (v NullableReturnEnvelope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnEnvelope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


