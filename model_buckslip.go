/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
)

// Buckslip struct for Buckslip
type Buckslip struct {
	// Unique identifier prefixed with `bck_`.
	Id string `json:"id"`
	// True if the buckslips should be auto-reordered.
	AutoReorder bool `json:"auto_reorder"`
	// The number of buckslips to be reordered.
	ReorderQuantity NullableInt32 `json:"reorder_quantity"`
	// The threshold amount of the buckslip
	ThresholdAmount int32 `json:"threshold_amount"`
	// The signed link for the buckslip.
	Url string `json:"url"`
	// The raw URL of the buckslip.
	RawUrl string `json:"raw_url"`
	// The original URL of the front template.
	FrontOriginalUrl string `json:"front_original_url"`
	// The original URL of the back template.
	BackOriginalUrl string `json:"back_original_url"`
	Thumbnails []Thumbnail `json:"thumbnails"`
	// The available quantity of buckslips.
	AvailableQuantity float32 `json:"available_quantity"`
	// The allocated quantity of buckslips.
	AllocatedQuantity float32 `json:"allocated_quantity"`
	// The onhand quantity of buckslips.
	OnhandQuantity float32 `json:"onhand_quantity"`
	// The pending quantity of buckslips.
	PendingQuantity float32 `json:"pending_quantity"`
	// The sum of pending and onhand quantities of buckslips.
	ProjectedQuantity float32 `json:"projected_quantity"`
	// An array of buckslip orders that are associated with the buckslip.
	BuckslipOrders []BuckslipOrder `json:"buckslip_orders"`
	Stock string `json:"stock"`
	Weight string `json:"weight"`
	Finish string `json:"finish"`
	Status string `json:"status"`
	// object
	Object string `json:"object"`
	// Description of the buckslip.
	Description NullableString `json:"description"`
	// The size of the buckslip
	Size *string `json:"size,omitempty"`
}

// NewBuckslip instantiates a new Buckslip object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuckslip(id string, autoReorder bool, reorderQuantity NullableInt32, thresholdAmount int32, url string, rawUrl string, frontOriginalUrl string, backOriginalUrl string, thumbnails []Thumbnail, availableQuantity float32, allocatedQuantity float32, onhandQuantity float32, pendingQuantity float32, projectedQuantity float32, buckslipOrders []BuckslipOrder, stock string, weight string, finish string, status string, object string, description NullableString) *Buckslip {
	this := Buckslip{}
	this.Id = id
	this.AutoReorder = autoReorder
	this.ReorderQuantity = reorderQuantity
	this.ThresholdAmount = thresholdAmount
	this.Url = url
	this.RawUrl = rawUrl
	this.FrontOriginalUrl = frontOriginalUrl
	this.BackOriginalUrl = backOriginalUrl
	this.Thumbnails = thumbnails
	this.AvailableQuantity = availableQuantity
	this.AllocatedQuantity = allocatedQuantity
	this.OnhandQuantity = onhandQuantity
	this.PendingQuantity = pendingQuantity
	this.ProjectedQuantity = projectedQuantity
	this.BuckslipOrders = buckslipOrders
	this.Stock = stock
	this.Weight = weight
	this.Finish = finish
	this.Status = status
	this.Object = object
	this.Description = description
	var size string = "8.75x3.75"
	this.Size = &size
	return &this
}

// NewBuckslipWithDefaults instantiates a new Buckslip object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuckslipWithDefaults() *Buckslip {
	this := Buckslip{}
	var autoReorder bool = false
	this.AutoReorder = autoReorder
	var thresholdAmount int32 = 0
	this.ThresholdAmount = thresholdAmount
	var availableQuantity float32 = 0
	this.AvailableQuantity = availableQuantity
	var allocatedQuantity float32 = 0
	this.AllocatedQuantity = allocatedQuantity
	var onhandQuantity float32 = 0
	this.OnhandQuantity = onhandQuantity
	var pendingQuantity float32 = 0
	this.PendingQuantity = pendingQuantity
	var projectedQuantity float32 = 0
	this.ProjectedQuantity = projectedQuantity
	var object string = "buckslip"
	this.Object = object
	var size string = "8.75x3.75"
	this.Size = &size
	return &this
}

// GetId returns the Id field value
func (o *Buckslip) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Buckslip) SetId(v string) {
	o.Id = v
}

// GetAutoReorder returns the AutoReorder field value
func (o *Buckslip) GetAutoReorder() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoReorder
}

// GetAutoReorderOk returns a tuple with the AutoReorder field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetAutoReorderOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoReorder, true
}

// SetAutoReorder sets field value
func (o *Buckslip) SetAutoReorder(v bool) {
	o.AutoReorder = v
}

// GetReorderQuantity returns the ReorderQuantity field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Buckslip) GetReorderQuantity() int32 {
	if o == nil || o.ReorderQuantity.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ReorderQuantity.Get()
}

// GetReorderQuantityOk returns a tuple with the ReorderQuantity field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Buckslip) GetReorderQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReorderQuantity.Get(), o.ReorderQuantity.IsSet()
}

// SetReorderQuantity sets field value
func (o *Buckslip) SetReorderQuantity(v int32) {
	o.ReorderQuantity.Set(&v)
}

// GetThresholdAmount returns the ThresholdAmount field value
func (o *Buckslip) GetThresholdAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ThresholdAmount
}

// GetThresholdAmountOk returns a tuple with the ThresholdAmount field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetThresholdAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThresholdAmount, true
}

// SetThresholdAmount sets field value
func (o *Buckslip) SetThresholdAmount(v int32) {
	o.ThresholdAmount = v
}

// GetUrl returns the Url field value
func (o *Buckslip) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Buckslip) SetUrl(v string) {
	o.Url = v
}

// GetRawUrl returns the RawUrl field value
func (o *Buckslip) GetRawUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawUrl
}

// GetRawUrlOk returns a tuple with the RawUrl field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetRawUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawUrl, true
}

// SetRawUrl sets field value
func (o *Buckslip) SetRawUrl(v string) {
	o.RawUrl = v
}

// GetFrontOriginalUrl returns the FrontOriginalUrl field value
func (o *Buckslip) GetFrontOriginalUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FrontOriginalUrl
}

// GetFrontOriginalUrlOk returns a tuple with the FrontOriginalUrl field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetFrontOriginalUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FrontOriginalUrl, true
}

// SetFrontOriginalUrl sets field value
func (o *Buckslip) SetFrontOriginalUrl(v string) {
	o.FrontOriginalUrl = v
}

// GetBackOriginalUrl returns the BackOriginalUrl field value
func (o *Buckslip) GetBackOriginalUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackOriginalUrl
}

// GetBackOriginalUrlOk returns a tuple with the BackOriginalUrl field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetBackOriginalUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackOriginalUrl, true
}

// SetBackOriginalUrl sets field value
func (o *Buckslip) SetBackOriginalUrl(v string) {
	o.BackOriginalUrl = v
}

// GetThumbnails returns the Thumbnails field value
func (o *Buckslip) GetThumbnails() []Thumbnail {
	if o == nil {
		var ret []Thumbnail
		return ret
	}

	return o.Thumbnails
}

// GetThumbnailsOk returns a tuple with the Thumbnails field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetThumbnailsOk() ([]Thumbnail, bool) {
	if o == nil {
		return nil, false
	}
	return o.Thumbnails, true
}

// SetThumbnails sets field value
func (o *Buckslip) SetThumbnails(v []Thumbnail) {
	o.Thumbnails = v
}

// GetAvailableQuantity returns the AvailableQuantity field value
func (o *Buckslip) GetAvailableQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AvailableQuantity
}

// GetAvailableQuantityOk returns a tuple with the AvailableQuantity field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetAvailableQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableQuantity, true
}

// SetAvailableQuantity sets field value
func (o *Buckslip) SetAvailableQuantity(v float32) {
	o.AvailableQuantity = v
}

// GetAllocatedQuantity returns the AllocatedQuantity field value
func (o *Buckslip) GetAllocatedQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AllocatedQuantity
}

// GetAllocatedQuantityOk returns a tuple with the AllocatedQuantity field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetAllocatedQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedQuantity, true
}

// SetAllocatedQuantity sets field value
func (o *Buckslip) SetAllocatedQuantity(v float32) {
	o.AllocatedQuantity = v
}

// GetOnhandQuantity returns the OnhandQuantity field value
func (o *Buckslip) GetOnhandQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.OnhandQuantity
}

// GetOnhandQuantityOk returns a tuple with the OnhandQuantity field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetOnhandQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnhandQuantity, true
}

// SetOnhandQuantity sets field value
func (o *Buckslip) SetOnhandQuantity(v float32) {
	o.OnhandQuantity = v
}

// GetPendingQuantity returns the PendingQuantity field value
func (o *Buckslip) GetPendingQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PendingQuantity
}

// GetPendingQuantityOk returns a tuple with the PendingQuantity field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetPendingQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingQuantity, true
}

// SetPendingQuantity sets field value
func (o *Buckslip) SetPendingQuantity(v float32) {
	o.PendingQuantity = v
}

// GetProjectedQuantity returns the ProjectedQuantity field value
func (o *Buckslip) GetProjectedQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProjectedQuantity
}

// GetProjectedQuantityOk returns a tuple with the ProjectedQuantity field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetProjectedQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectedQuantity, true
}

// SetProjectedQuantity sets field value
func (o *Buckslip) SetProjectedQuantity(v float32) {
	o.ProjectedQuantity = v
}

// GetBuckslipOrders returns the BuckslipOrders field value
func (o *Buckslip) GetBuckslipOrders() []BuckslipOrder {
	if o == nil {
		var ret []BuckslipOrder
		return ret
	}

	return o.BuckslipOrders
}

// GetBuckslipOrdersOk returns a tuple with the BuckslipOrders field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetBuckslipOrdersOk() ([]BuckslipOrder, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuckslipOrders, true
}

// SetBuckslipOrders sets field value
func (o *Buckslip) SetBuckslipOrders(v []BuckslipOrder) {
	o.BuckslipOrders = v
}

// GetStock returns the Stock field value
func (o *Buckslip) GetStock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stock
}

// GetStockOk returns a tuple with the Stock field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetStockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stock, true
}

// SetStock sets field value
func (o *Buckslip) SetStock(v string) {
	o.Stock = v
}

// GetWeight returns the Weight field value
func (o *Buckslip) GetWeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetWeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weight, true
}

// SetWeight sets field value
func (o *Buckslip) SetWeight(v string) {
	o.Weight = v
}

// GetFinish returns the Finish field value
func (o *Buckslip) GetFinish() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Finish
}

// GetFinishOk returns a tuple with the Finish field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetFinishOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Finish, true
}

// SetFinish sets field value
func (o *Buckslip) SetFinish(v string) {
	o.Finish = v
}

// GetStatus returns the Status field value
func (o *Buckslip) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Buckslip) SetStatus(v string) {
	o.Status = v
}

// GetObject returns the Object field value
func (o *Buckslip) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Buckslip) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Buckslip) SetObject(v string) {
	o.Object = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Buckslip) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Buckslip) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Buckslip) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Buckslip) GetSize() string {
	if o == nil || o.Size == nil {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Buckslip) GetSizeOk() (*string, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Buckslip) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *Buckslip) SetSize(v string) {
	o.Size = &v
}

func (o Buckslip) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["auto_reorder"] = o.AutoReorder
	}
	if true {
		toSerialize["reorder_quantity"] = o.ReorderQuantity.Get()
	}
	if true {
		toSerialize["threshold_amount"] = o.ThresholdAmount
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["raw_url"] = o.RawUrl
	}
	if true {
		toSerialize["front_original_url"] = o.FrontOriginalUrl
	}
	if true {
		toSerialize["back_original_url"] = o.BackOriginalUrl
	}
	if true {
		toSerialize["thumbnails"] = o.Thumbnails
	}
	if true {
		toSerialize["available_quantity"] = o.AvailableQuantity
	}
	if true {
		toSerialize["allocated_quantity"] = o.AllocatedQuantity
	}
	if true {
		toSerialize["onhand_quantity"] = o.OnhandQuantity
	}
	if true {
		toSerialize["pending_quantity"] = o.PendingQuantity
	}
	if true {
		toSerialize["projected_quantity"] = o.ProjectedQuantity
	}
	if true {
		toSerialize["buckslip_orders"] = o.BuckslipOrders
	}
	if true {
		toSerialize["stock"] = o.Stock
	}
	if true {
		toSerialize["weight"] = o.Weight
	}
	if true {
		toSerialize["finish"] = o.Finish
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["object"] = o.Object
	}
	if true {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableBuckslip struct {
	value *Buckslip
	isSet bool
}

func (v NullableBuckslip) Get() *Buckslip {
	return v.value
}

func (v *NullableBuckslip) Set(val *Buckslip) {
	v.value = val
	v.isSet = true
}

func (v NullableBuckslip) IsSet() bool {
	return v.isSet
}

func (v *NullableBuckslip) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuckslip(val *Buckslip) *NullableBuckslip {
	return &NullableBuckslip{value: val, isSet: true}
}

func (v NullableBuckslip) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuckslip) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


