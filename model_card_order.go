/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	"time"
)

// CardOrder struct for CardOrder
type CardOrder struct {
	// Unique identifier prefixed with `co_`.
	Id *string `json:"id,omitempty"`
	// Unique identifier prefixed with `card_`.
	CardId *string `json:"card_id,omitempty"`
	// The status of the card order.
	Status *string `json:"status,omitempty"`
	// The inventory of the card order.
	Inventory *float32 `json:"inventory,omitempty"`
	// The quantity of cards ordered
	QuantityOrdered *float32 `json:"quantity_ordered,omitempty"`
	// The unit price for the card order.
	UnitPrice *float32 `json:"unit_price,omitempty"`
	// The reason for cancellation.
	CancelledReason *string `json:"cancelled_reason,omitempty"`
	// A timestamp in ISO 8601 format of the date the resource was created.
	AvailabilityDate *time.Time `json:"availability_date,omitempty"`
	// The fixed deadline for the cards to be printed.
	ExpectedAvailabilityDate *time.Time `json:"expected_availability_date,omitempty"`
	// A timestamp in ISO 8601 format of the date the resource was created.
	DateCreated time.Time `json:"date_created"`
	// A timestamp in ISO 8601 format of the date the resource was last modified.
	DateModified time.Time `json:"date_modified"`
	// Only returned if the resource has been successfully deleted.
	Deleted *bool `json:"deleted,omitempty"`
	// Value is type of resource.
	Object string `json:"object"`
}

// NewCardOrder instantiates a new CardOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardOrder(dateCreated time.Time, dateModified time.Time, object string) *CardOrder {
	this := CardOrder{}
	var inventory float32 = 0
	this.Inventory = &inventory
	var quantityOrdered float32 = 0
	this.QuantityOrdered = &quantityOrdered
	var unitPrice float32 = 0
	this.UnitPrice = &unitPrice
	this.DateCreated = dateCreated
	this.DateModified = dateModified
	this.Object = object
	return &this
}

// NewCardOrderWithDefaults instantiates a new CardOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardOrderWithDefaults() *CardOrder {
	this := CardOrder{}
	var inventory float32 = 0
	this.Inventory = &inventory
	var quantityOrdered float32 = 0
	this.QuantityOrdered = &quantityOrdered
	var unitPrice float32 = 0
	this.UnitPrice = &unitPrice
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CardOrder) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOrder) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CardOrder) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CardOrder) SetId(v string) {
	o.Id = &v
}

// GetCardId returns the CardId field value if set, zero value otherwise.
func (o *CardOrder) GetCardId() string {
	if o == nil || o.CardId == nil {
		var ret string
		return ret
	}
	return *o.CardId
}

// GetCardIdOk returns a tuple with the CardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOrder) GetCardIdOk() (*string, bool) {
	if o == nil || o.CardId == nil {
		return nil, false
	}
	return o.CardId, true
}

// HasCardId returns a boolean if a field has been set.
func (o *CardOrder) HasCardId() bool {
	if o != nil && o.CardId != nil {
		return true
	}

	return false
}

// SetCardId gets a reference to the given string and assigns it to the CardId field.
func (o *CardOrder) SetCardId(v string) {
	o.CardId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CardOrder) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOrder) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CardOrder) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CardOrder) SetStatus(v string) {
	o.Status = &v
}

// GetInventory returns the Inventory field value if set, zero value otherwise.
func (o *CardOrder) GetInventory() float32 {
	if o == nil || o.Inventory == nil {
		var ret float32
		return ret
	}
	return *o.Inventory
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOrder) GetInventoryOk() (*float32, bool) {
	if o == nil || o.Inventory == nil {
		return nil, false
	}
	return o.Inventory, true
}

// HasInventory returns a boolean if a field has been set.
func (o *CardOrder) HasInventory() bool {
	if o != nil && o.Inventory != nil {
		return true
	}

	return false
}

// SetInventory gets a reference to the given float32 and assigns it to the Inventory field.
func (o *CardOrder) SetInventory(v float32) {
	o.Inventory = &v
}

// GetQuantityOrdered returns the QuantityOrdered field value if set, zero value otherwise.
func (o *CardOrder) GetQuantityOrdered() float32 {
	if o == nil || o.QuantityOrdered == nil {
		var ret float32
		return ret
	}
	return *o.QuantityOrdered
}

// GetQuantityOrderedOk returns a tuple with the QuantityOrdered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOrder) GetQuantityOrderedOk() (*float32, bool) {
	if o == nil || o.QuantityOrdered == nil {
		return nil, false
	}
	return o.QuantityOrdered, true
}

// HasQuantityOrdered returns a boolean if a field has been set.
func (o *CardOrder) HasQuantityOrdered() bool {
	if o != nil && o.QuantityOrdered != nil {
		return true
	}

	return false
}

// SetQuantityOrdered gets a reference to the given float32 and assigns it to the QuantityOrdered field.
func (o *CardOrder) SetQuantityOrdered(v float32) {
	o.QuantityOrdered = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *CardOrder) GetUnitPrice() float32 {
	if o == nil || o.UnitPrice == nil {
		var ret float32
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOrder) GetUnitPriceOk() (*float32, bool) {
	if o == nil || o.UnitPrice == nil {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *CardOrder) HasUnitPrice() bool {
	if o != nil && o.UnitPrice != nil {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given float32 and assigns it to the UnitPrice field.
func (o *CardOrder) SetUnitPrice(v float32) {
	o.UnitPrice = &v
}

// GetCancelledReason returns the CancelledReason field value if set, zero value otherwise.
func (o *CardOrder) GetCancelledReason() string {
	if o == nil || o.CancelledReason == nil {
		var ret string
		return ret
	}
	return *o.CancelledReason
}

// GetCancelledReasonOk returns a tuple with the CancelledReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOrder) GetCancelledReasonOk() (*string, bool) {
	if o == nil || o.CancelledReason == nil {
		return nil, false
	}
	return o.CancelledReason, true
}

// HasCancelledReason returns a boolean if a field has been set.
func (o *CardOrder) HasCancelledReason() bool {
	if o != nil && o.CancelledReason != nil {
		return true
	}

	return false
}

// SetCancelledReason gets a reference to the given string and assigns it to the CancelledReason field.
func (o *CardOrder) SetCancelledReason(v string) {
	o.CancelledReason = &v
}

// GetAvailabilityDate returns the AvailabilityDate field value if set, zero value otherwise.
func (o *CardOrder) GetAvailabilityDate() time.Time {
	if o == nil || o.AvailabilityDate == nil {
		var ret time.Time
		return ret
	}
	return *o.AvailabilityDate
}

// GetAvailabilityDateOk returns a tuple with the AvailabilityDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOrder) GetAvailabilityDateOk() (*time.Time, bool) {
	if o == nil || o.AvailabilityDate == nil {
		return nil, false
	}
	return o.AvailabilityDate, true
}

// HasAvailabilityDate returns a boolean if a field has been set.
func (o *CardOrder) HasAvailabilityDate() bool {
	if o != nil && o.AvailabilityDate != nil {
		return true
	}

	return false
}

// SetAvailabilityDate gets a reference to the given time.Time and assigns it to the AvailabilityDate field.
func (o *CardOrder) SetAvailabilityDate(v time.Time) {
	o.AvailabilityDate = &v
}

// GetExpectedAvailabilityDate returns the ExpectedAvailabilityDate field value if set, zero value otherwise.
func (o *CardOrder) GetExpectedAvailabilityDate() time.Time {
	if o == nil || o.ExpectedAvailabilityDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpectedAvailabilityDate
}

// GetExpectedAvailabilityDateOk returns a tuple with the ExpectedAvailabilityDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOrder) GetExpectedAvailabilityDateOk() (*time.Time, bool) {
	if o == nil || o.ExpectedAvailabilityDate == nil {
		return nil, false
	}
	return o.ExpectedAvailabilityDate, true
}

// HasExpectedAvailabilityDate returns a boolean if a field has been set.
func (o *CardOrder) HasExpectedAvailabilityDate() bool {
	if o != nil && o.ExpectedAvailabilityDate != nil {
		return true
	}

	return false
}

// SetExpectedAvailabilityDate gets a reference to the given time.Time and assigns it to the ExpectedAvailabilityDate field.
func (o *CardOrder) SetExpectedAvailabilityDate(v time.Time) {
	o.ExpectedAvailabilityDate = &v
}

// GetDateCreated returns the DateCreated field value
func (o *CardOrder) GetDateCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value
// and a boolean to check if the value has been set.
func (o *CardOrder) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateCreated, true
}

// SetDateCreated sets field value
func (o *CardOrder) SetDateCreated(v time.Time) {
	o.DateCreated = v
}

// GetDateModified returns the DateModified field value
func (o *CardOrder) GetDateModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value
// and a boolean to check if the value has been set.
func (o *CardOrder) GetDateModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateModified, true
}

// SetDateModified sets field value
func (o *CardOrder) SetDateModified(v time.Time) {
	o.DateModified = v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *CardOrder) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOrder) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *CardOrder) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *CardOrder) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetObject returns the Object field value
func (o *CardOrder) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *CardOrder) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *CardOrder) SetObject(v string) {
	o.Object = v
}

func (o CardOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CardId != nil {
		toSerialize["card_id"] = o.CardId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Inventory != nil {
		toSerialize["inventory"] = o.Inventory
	}
	if o.QuantityOrdered != nil {
		toSerialize["quantity_ordered"] = o.QuantityOrdered
	}
	if o.UnitPrice != nil {
		toSerialize["unit_price"] = o.UnitPrice
	}
	if o.CancelledReason != nil {
		toSerialize["cancelled_reason"] = o.CancelledReason
	}
	if o.AvailabilityDate != nil {
		toSerialize["availability_date"] = o.AvailabilityDate
	}
	if o.ExpectedAvailabilityDate != nil {
		toSerialize["expected_availability_date"] = o.ExpectedAvailabilityDate
	}
	if true {
		toSerialize["date_created"] = o.DateCreated
	}
	if true {
		toSerialize["date_modified"] = o.DateModified
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if true {
		toSerialize["object"] = o.Object
	}
	return json.Marshal(toSerialize)
}

type NullableCardOrder struct {
	value *CardOrder
	isSet bool
}

func (v NullableCardOrder) Get() *CardOrder {
	return v.value
}

func (v *NullableCardOrder) Set(val *CardOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableCardOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableCardOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardOrder(val *CardOrder) *NullableCardOrder {
	return &NullableCardOrder{value: val, isSet: true}
}

func (v NullableCardOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


