/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
)

// LocationAnalysis A nested object containing a breakdown of the analysis of a reverse geocoded location.
type LocationAnalysis struct {
	// A positive or negative decimal indicating the geographic latitude of the address.
	Latitude NullableFloat32 `json:"latitude"`
	// A positive or negative decimal indicating the geographic longitude of the address.
	Longitude NullableFloat32 `json:"longitude"`
	// The distance from the input location to this exact zip code in miles.
	Distance float32 `json:"distance"`
}

// NewLocationAnalysis instantiates a new LocationAnalysis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationAnalysis(latitude NullableFloat32, longitude NullableFloat32, distance float32) *LocationAnalysis {
	this := LocationAnalysis{}
	this.Latitude = latitude
	this.Longitude = longitude
	this.Distance = distance
	return &this
}

// NewLocationAnalysisWithDefaults instantiates a new LocationAnalysis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationAnalysisWithDefaults() *LocationAnalysis {
	this := LocationAnalysis{}
	return &this
}

// GetLatitude returns the Latitude field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *LocationAnalysis) GetLatitude() float32 {
	if o == nil || o.Latitude.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Latitude.Get()
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationAnalysis) GetLatitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Latitude.Get(), o.Latitude.IsSet()
}

// SetLatitude sets field value
func (o *LocationAnalysis) SetLatitude(v float32) {
	o.Latitude.Set(&v)
}

// GetLongitude returns the Longitude field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *LocationAnalysis) GetLongitude() float32 {
	if o == nil || o.Longitude.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Longitude.Get()
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationAnalysis) GetLongitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Longitude.Get(), o.Longitude.IsSet()
}

// SetLongitude sets field value
func (o *LocationAnalysis) SetLongitude(v float32) {
	o.Longitude.Set(&v)
}

// GetDistance returns the Distance field value
func (o *LocationAnalysis) GetDistance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *LocationAnalysis) GetDistanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *LocationAnalysis) SetDistance(v float32) {
	o.Distance = v
}

func (o LocationAnalysis) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["latitude"] = o.Latitude.Get()
	}
	if true {
		toSerialize["longitude"] = o.Longitude.Get()
	}
	if true {
		toSerialize["distance"] = o.Distance
	}
	return json.Marshal(toSerialize)
}

type NullableLocationAnalysis struct {
	value *LocationAnalysis
	isSet bool
}

func (v NullableLocationAnalysis) Get() *LocationAnalysis {
	return v.value
}

func (v *NullableLocationAnalysis) Set(val *LocationAnalysis) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationAnalysis) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationAnalysis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationAnalysis(val *LocationAnalysis) *NullableLocationAnalysis {
	return &NullableLocationAnalysis{value: val, isSet: true}
}

func (v NullableLocationAnalysis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationAnalysis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


