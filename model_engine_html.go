/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	"fmt"
)

// EngineHtml The engine used to combine HTML template with merge variables.   * `legacy` - Lob's original engine   * `handlebars` 
type EngineHtml string

// List of engine_html
const (
	ENGINEHTML_LEGACY EngineHtml = "legacy"
	ENGINEHTML_HANDLEBARS EngineHtml = "handlebars"
)

// All allowed values of EngineHtml enum
var AllowedEngineHtmlEnumValues = []EngineHtml{
	"legacy",
	"handlebars",
}

func (v *EngineHtml) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EngineHtml(value)
	for _, existing := range AllowedEngineHtmlEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EngineHtml", value)
}

// NewEngineHtmlFromValue returns a pointer to a valid EngineHtml
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEngineHtmlFromValue(v string) (*EngineHtml, error) {
	ev := EngineHtml(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EngineHtml: valid values are %v", v, AllowedEngineHtmlEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EngineHtml) IsValid() bool {
	for _, existing := range AllowedEngineHtmlEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to engine_html value
func (v EngineHtml) Ptr() *EngineHtml {
	return &v
}

type NullableEngineHtml struct {
	value *EngineHtml
	isSet bool
}

func (v NullableEngineHtml) Get() *EngineHtml {
	return v.value
}

func (v *NullableEngineHtml) Set(val *EngineHtml) {
	v.value = val
	v.isSet = true
}

func (v NullableEngineHtml) IsSet() bool {
	return v.isSet
}

func (v *NullableEngineHtml) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngineHtml(val *EngineHtml) *NullableEngineHtml {
	return &NullableEngineHtml{value: val, isSet: true}
}

func (v NullableEngineHtml) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngineHtml) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

