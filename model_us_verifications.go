/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob.go

import (
	"encoding/json"
)

// UsVerifications struct for UsVerifications
type UsVerifications struct {
	Addresses []UsVerificationOrError `json:"addresses"`
	// Indicates whether any errors occurred during the verification process.
	Errors bool `json:"errors"`
}

// NewUsVerifications instantiates a new UsVerifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsVerifications(addresses []UsVerificationOrError, errors bool) *UsVerifications {
	this := UsVerifications{}
	this.Addresses = addresses
	this.Errors = errors
	return &this
}

// NewUsVerificationsWithDefaults instantiates a new UsVerifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsVerificationsWithDefaults() *UsVerifications {
	this := UsVerifications{}
	return &this
}

// GetAddresses returns the Addresses field value
func (o *UsVerifications) GetAddresses() []UsVerificationOrError {
	if o == nil {
		var ret []UsVerificationOrError
		return ret
	}

	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value
// and a boolean to check if the value has been set.
func (o *UsVerifications) GetAddressesOk() ([]UsVerificationOrError, bool) {
	if o == nil {
		return nil, false
	}
	return o.Addresses, true
}

// SetAddresses sets field value
func (o *UsVerifications) SetAddresses(v []UsVerificationOrError) {
	o.Addresses = v
}

// GetErrors returns the Errors field value
func (o *UsVerifications) GetErrors() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *UsVerifications) GetErrorsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Errors, true
}

// SetErrors sets field value
func (o *UsVerifications) SetErrors(v bool) {
	o.Errors = v
}

func (o UsVerifications) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["addresses"] = o.Addresses
	}
	if true {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableUsVerifications struct {
	value *UsVerifications
	isSet bool
}

func (v NullableUsVerifications) Get() *UsVerifications {
	return v.value
}

func (v *NullableUsVerifications) Set(val *UsVerifications) {
	v.value = val
	v.isSet = true
}

func (v NullableUsVerifications) IsSet() bool {
	return v.isSet
}

func (v *NullableUsVerifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsVerifications(val *UsVerifications) *NullableUsVerifications {
	return &NullableUsVerifications{value: val, isSet: true}
}

func (v NullableUsVerifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsVerifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


