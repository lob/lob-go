/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
	"time"
)

// TemplateVersion struct for TemplateVersion
type TemplateVersion struct {
	// Unique identifier prefixed with `vrsn_`.
	Id string `json:"id"`
	// An internal description that identifies this resource. Must be no longer than 255 characters. 
	Description NullableString `json:"description,omitempty"`
	// An HTML string of less than 100,000 characters to be used as the `published_version` of this template. See [here](#section/HTML-Examples) for guidance on designing HTML templates. Please see endpoint specific documentation for any other product-specific HTML details: - [Postcards](https://docs.lob.com/#tag/Postcards/operation/postcard_create) - `front` and `back` - [Self Mailers](https://docs.lob.com/#tag/Self-Mailers/operation/self_mailer_create) - `inside` and `outside` - [Letters](https://docs.lob.com/#tag/Letters/operation/letter_create) - `file` - [Checks](https://docs.lob.com/#tag/Checks/operation/check_create) - `check_bottom` and `attachment` - [Cards](https://docs.lob.com/#tag/Cards/operation/card_create) - `front` and `back`  If there is a syntax error with your variable names within your HTML, then an error will be thrown, e.g. using a `{{#users}}` opening tag without the corresponding closing tag `{{/users}}`. 
	Html string `json:"html"`
	Engine NullableEngineHtml `json:"engine,omitempty"`
	// Used by frontend, true if the template uses advanced features. 
	SuggestJsonEditor *bool `json:"suggest_json_editor,omitempty"`
	// Used by frontend, an object representing the keys of every merge variable present in the template. It has one key named 'keys', and its value is an array of strings. 
	MergeVariables map[string]interface{} `json:"merge_variables,omitempty"`
	// A timestamp in ISO 8601 format of the date the resource was created.
	DateCreated *time.Time `json:"date_created,omitempty"`
	// A timestamp in ISO 8601 format of the date the resource was last modified.
	DateModified *time.Time `json:"date_modified,omitempty"`
	// Only returned if the resource has been successfully deleted.
	Deleted *bool `json:"deleted,omitempty"`
	// Value is resource type.
	Object *string `json:"object,omitempty"`
}

// NewTemplateVersion instantiates a new TemplateVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateVersion(id string, html string) *TemplateVersion {
	this := TemplateVersion{}
	this.Id = id
	this.Html = html
	var engine EngineHtml = ENGINEHTML_LEGACY
	this.Engine = *NewNullableEngineHtml(&engine)
	var object string = "version"
	this.Object = &object
	return &this
}

// NewTemplateVersionWithDefaults instantiates a new TemplateVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateVersionWithDefaults() *TemplateVersion {
	this := TemplateVersion{}
	var engine EngineHtml = ENGINEHTML_LEGACY
	this.Engine = *NewNullableEngineHtml(&engine)
	var object string = "version"
	this.Object = &object
	return &this
}

// GetId returns the Id field value
func (o *TemplateVersion) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TemplateVersion) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TemplateVersion) SetId(v string) {
	o.Id = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TemplateVersion) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TemplateVersion) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TemplateVersion) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TemplateVersion) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TemplateVersion) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TemplateVersion) UnsetDescription() {
	o.Description.Unset()
}

// GetHtml returns the Html field value
func (o *TemplateVersion) GetHtml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Html
}

// GetHtmlOk returns a tuple with the Html field value
// and a boolean to check if the value has been set.
func (o *TemplateVersion) GetHtmlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Html, true
}

// SetHtml sets field value
func (o *TemplateVersion) SetHtml(v string) {
	o.Html = v
}

// GetEngine returns the Engine field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TemplateVersion) GetEngine() EngineHtml {
	if o == nil || o.Engine.Get() == nil {
		var ret EngineHtml
		return ret
	}
	return *o.Engine.Get()
}

// GetEngineOk returns a tuple with the Engine field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TemplateVersion) GetEngineOk() (*EngineHtml, bool) {
	if o == nil {
		return nil, false
	}
	return o.Engine.Get(), o.Engine.IsSet()
}

// HasEngine returns a boolean if a field has been set.
func (o *TemplateVersion) HasEngine() bool {
	if o != nil && o.Engine.IsSet() {
		return true
	}

	return false
}

// SetEngine gets a reference to the given NullableEngineHtml and assigns it to the Engine field.
func (o *TemplateVersion) SetEngine(v EngineHtml) {
	o.Engine.Set(&v)
}
// SetEngineNil sets the value for Engine to be an explicit nil
func (o *TemplateVersion) SetEngineNil() {
	o.Engine.Set(nil)
}

// UnsetEngine ensures that no value is present for Engine, not even an explicit nil
func (o *TemplateVersion) UnsetEngine() {
	o.Engine.Unset()
}

// GetSuggestJsonEditor returns the SuggestJsonEditor field value if set, zero value otherwise.
func (o *TemplateVersion) GetSuggestJsonEditor() bool {
	if o == nil || o.SuggestJsonEditor == nil {
		var ret bool
		return ret
	}
	return *o.SuggestJsonEditor
}

// GetSuggestJsonEditorOk returns a tuple with the SuggestJsonEditor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateVersion) GetSuggestJsonEditorOk() (*bool, bool) {
	if o == nil || o.SuggestJsonEditor == nil {
		return nil, false
	}
	return o.SuggestJsonEditor, true
}

// HasSuggestJsonEditor returns a boolean if a field has been set.
func (o *TemplateVersion) HasSuggestJsonEditor() bool {
	if o != nil && o.SuggestJsonEditor != nil {
		return true
	}

	return false
}

// SetSuggestJsonEditor gets a reference to the given bool and assigns it to the SuggestJsonEditor field.
func (o *TemplateVersion) SetSuggestJsonEditor(v bool) {
	o.SuggestJsonEditor = &v
}

// GetMergeVariables returns the MergeVariables field value if set, zero value otherwise.
func (o *TemplateVersion) GetMergeVariables() map[string]interface{} {
	if o == nil || o.MergeVariables == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.MergeVariables
}

// GetMergeVariablesOk returns a tuple with the MergeVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateVersion) GetMergeVariablesOk() (map[string]interface{}, bool) {
	if o == nil || o.MergeVariables == nil {
		return nil, false
	}
	return o.MergeVariables, true
}

// HasMergeVariables returns a boolean if a field has been set.
func (o *TemplateVersion) HasMergeVariables() bool {
	if o != nil && o.MergeVariables != nil {
		return true
	}

	return false
}

// SetMergeVariables gets a reference to the given map[string]interface{} and assigns it to the MergeVariables field.
func (o *TemplateVersion) SetMergeVariables(v map[string]interface{}) {
	o.MergeVariables = v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *TemplateVersion) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateVersion) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *TemplateVersion) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *TemplateVersion) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetDateModified returns the DateModified field value if set, zero value otherwise.
func (o *TemplateVersion) GetDateModified() time.Time {
	if o == nil || o.DateModified == nil {
		var ret time.Time
		return ret
	}
	return *o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateVersion) GetDateModifiedOk() (*time.Time, bool) {
	if o == nil || o.DateModified == nil {
		return nil, false
	}
	return o.DateModified, true
}

// HasDateModified returns a boolean if a field has been set.
func (o *TemplateVersion) HasDateModified() bool {
	if o != nil && o.DateModified != nil {
		return true
	}

	return false
}

// SetDateModified gets a reference to the given time.Time and assigns it to the DateModified field.
func (o *TemplateVersion) SetDateModified(v time.Time) {
	o.DateModified = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *TemplateVersion) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateVersion) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *TemplateVersion) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *TemplateVersion) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *TemplateVersion) GetObject() string {
	if o == nil || o.Object == nil {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateVersion) GetObjectOk() (*string, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *TemplateVersion) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *TemplateVersion) SetObject(v string) {
	o.Object = &v
}

func (o TemplateVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["html"] = o.Html
	}
	if o.Engine.IsSet() {
		toSerialize["engine"] = o.Engine.Get()
	}
	if o.SuggestJsonEditor != nil {
		toSerialize["suggest_json_editor"] = o.SuggestJsonEditor
	}
	if o.MergeVariables != nil {
		toSerialize["merge_variables"] = o.MergeVariables
	}
	if o.DateCreated != nil {
		toSerialize["date_created"] = o.DateCreated
	}
	if o.DateModified != nil {
		toSerialize["date_modified"] = o.DateModified
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	return json.Marshal(toSerialize)
}

type NullableTemplateVersion struct {
	value *TemplateVersion
	isSet bool
}

func (v NullableTemplateVersion) Get() *TemplateVersion {
	return v.value
}

func (v *NullableTemplateVersion) Set(val *TemplateVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateVersion(val *TemplateVersion) *NullableTemplateVersion {
	return &NullableTemplateVersion{value: val, isSet: true}
}

func (v NullableTemplateVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


