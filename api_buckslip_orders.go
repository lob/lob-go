/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// BuckslipOrdersApiService BuckslipOrdersApi service
type BuckslipOrdersApiService service

type ApiBuckslipOrderCreateRequest struct {
	ctx context.Context
	ApiService *BuckslipOrdersApiService
	buckslipId string
	buckslipOrderEditable *BuckslipOrderEditable
}

func (r ApiBuckslipOrderCreateRequest) BuckslipOrderEditable(buckslipOrderEditable BuckslipOrderEditable) ApiBuckslipOrderCreateRequest {
	r.buckslipOrderEditable = &buckslipOrderEditable
	return r
}

func (r ApiBuckslipOrderCreateRequest) Execute() (*BuckslipOrder, *http.Response, error) {
	return r.ApiService.BuckslipOrderCreateExecute(r)
}

/*
BuckslipOrderCreate create

Creates a new buckslip order given information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param buckslipId The ID of the buckslip to which the buckslip orders belong.
 @return ApiBuckslipOrderCreateRequest
*/
func (a *BuckslipOrdersApiService) Create(ctx context.Context, buckslipId string) ApiBuckslipOrderCreateRequest {
	return ApiBuckslipOrderCreateRequest{
		ApiService: a,
		ctx: ctx,
		buckslipId: buckslipId,
	}
}

// Execute executes the request
//  @return BuckslipOrder
func (a *BuckslipOrdersApiService) BuckslipOrderCreateExecute(r ApiBuckslipOrderCreateRequest) (*BuckslipOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuckslipOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuckslipOrdersApiService.BuckslipOrderCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/buckslips/{buckslip_id}/orders"
	localVarPath = strings.Replace(localVarPath, "{"+"buckslip_id"+"}", url.PathEscape(parameterToString(r.buckslipId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buckslipOrderEditable == nil {
		return localVarReturnValue, nil, reportError("buckslipOrderEditable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buckslipOrderEditable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v LobError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuckslipOrdersRetrieveRequest struct {
	ctx context.Context
	ApiService *BuckslipOrdersApiService
	buckslipId string
	limit *int32
	offset *int32
}

// How many results to return.
func (r ApiBuckslipOrdersRetrieveRequest) Limit(limit int32) ApiBuckslipOrdersRetrieveRequest {
	r.limit = &limit
	return r
}

// An integer that designates the offset at which to begin returning results. Defaults to 0.
func (r ApiBuckslipOrdersRetrieveRequest) Offset(offset int32) ApiBuckslipOrdersRetrieveRequest {
	r.offset = &offset
	return r
}

func (r ApiBuckslipOrdersRetrieveRequest) Execute() (*BuckslipOrdersList, *http.Response, error) {
	return r.ApiService.BuckslipOrdersRetrieveExecute(r)
}

/*
BuckslipOrdersRetrieve get

Retrieves the buckslip orders associated with the given buckslip id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param buckslipId The ID of the buckslip to which the buckslip orders belong.
 @return ApiBuckslipOrdersRetrieveRequest
*/
func (a *BuckslipOrdersApiService) Get(ctx context.Context, buckslipId string) ApiBuckslipOrdersRetrieveRequest {
	return ApiBuckslipOrdersRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		buckslipId: buckslipId,
	}
}

// Execute executes the request
//  @return BuckslipOrdersList
func (a *BuckslipOrdersApiService) BuckslipOrdersRetrieveExecute(r ApiBuckslipOrdersRetrieveRequest) (*BuckslipOrdersList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuckslipOrdersList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuckslipOrdersApiService.BuckslipOrdersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/buckslips/{buckslip_id}/orders"
	localVarPath = strings.Replace(localVarPath, "{"+"buckslip_id"+"}", url.PathEscape(parameterToString(r.buckslipId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v LobError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
