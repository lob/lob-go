/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob.go

import (
	"encoding/json"
	"fmt"
)

// CountryExtended Must be a 2 letter country short-name code (ISO 3166).
type CountryExtended string

// List of country_extended
const (
	AD CountryExtended = "AD"
	AE CountryExtended = "AE"
	AF CountryExtended = "AF"
	AG CountryExtended = "AG"
	AI CountryExtended = "AI"
	AL CountryExtended = "AL"
	AN CountryExtended = "AN"
	AO CountryExtended = "AO"
	AQ CountryExtended = "AQ"
	AR CountryExtended = "AR"
	AT CountryExtended = "AT"
	AU CountryExtended = "AU"
	AW CountryExtended = "AW"
	AZ CountryExtended = "AZ"
	BA CountryExtended = "BA"
	BB CountryExtended = "BB"
	BD CountryExtended = "BD"
	BE CountryExtended = "BE"
	BF CountryExtended = "BF"
	BG CountryExtended = "BG"
	BH CountryExtended = "BH"
	BI CountryExtended = "BI"
	BJ CountryExtended = "BJ"
	BM CountryExtended = "BM"
	BN CountryExtended = "BN"
	BO CountryExtended = "BO"
	BQ CountryExtended = "BQ"
	BR CountryExtended = "BR"
	BS CountryExtended = "BS"
	BT CountryExtended = "BT"
	BW CountryExtended = "BW"
	BY CountryExtended = "BY"
	BZ CountryExtended = "BZ"
	CA CountryExtended = "CA"
	CD CountryExtended = "CD"
	CG CountryExtended = "CG"
	CH CountryExtended = "CH"
	CI CountryExtended = "CI"
	CK CountryExtended = "CK"
	CL CountryExtended = "CL"
	CM CountryExtended = "CM"
	CN CountryExtended = "CN"
	CO CountryExtended = "CO"
	CR CountryExtended = "CR"
	CS CountryExtended = "CS"
	CU CountryExtended = "CU"
	CV CountryExtended = "CV"
	CW CountryExtended = "CW"
	CY CountryExtended = "CY"
	CZ CountryExtended = "CZ"
	DE CountryExtended = "DE"
	DJ CountryExtended = "DJ"
	DK CountryExtended = "DK"
	DM CountryExtended = "DM"
	DO CountryExtended = "DO"
	DZ CountryExtended = "DZ"
	EC CountryExtended = "EC"
	EE CountryExtended = "EE"
	EG CountryExtended = "EG"
	EH CountryExtended = "EH"
	ER CountryExtended = "ER"
	ES CountryExtended = "ES"
	ET CountryExtended = "ET"
	FI CountryExtended = "FI"
	FJ CountryExtended = "FJ"
	FK CountryExtended = "FK"
	FO CountryExtended = "FO"
	FR CountryExtended = "FR"
	GA CountryExtended = "GA"
	GB CountryExtended = "GB"
	GD CountryExtended = "GD"
	GE CountryExtended = "GE"
	GH CountryExtended = "GH"
	GI CountryExtended = "GI"
	GL CountryExtended = "GL"
	GM CountryExtended = "GM"
	GN CountryExtended = "GN"
	GQ CountryExtended = "GQ"
	GR CountryExtended = "GR"
	GS CountryExtended = "GS"
	GT CountryExtended = "GT"
	GW CountryExtended = "GW"
	GY CountryExtended = "GY"
	HK CountryExtended = "HK"
	HN CountryExtended = "HN"
	HR CountryExtended = "HR"
	HT CountryExtended = "HT"
	HU CountryExtended = "HU"
	ID CountryExtended = "ID"
	IE CountryExtended = "IE"
	IL CountryExtended = "IL"
	IN CountryExtended = "IN"
	IO CountryExtended = "IO"
	IQ CountryExtended = "IQ"
	IR CountryExtended = "IR"
	IS CountryExtended = "IS"
	IT CountryExtended = "IT"
	JM CountryExtended = "JM"
	JO CountryExtended = "JO"
	JP CountryExtended = "JP"
	KE CountryExtended = "KE"
	KG CountryExtended = "KG"
	KH CountryExtended = "KH"
	KI CountryExtended = "KI"
	KM CountryExtended = "KM"
	KN CountryExtended = "KN"
	KP CountryExtended = "KP"
	KR CountryExtended = "KR"
	KW CountryExtended = "KW"
	KY CountryExtended = "KY"
	KZ CountryExtended = "KZ"
	LA CountryExtended = "LA"
	LB CountryExtended = "LB"
	LC CountryExtended = "LC"
	LI CountryExtended = "LI"
	LK CountryExtended = "LK"
	LR CountryExtended = "LR"
	LS CountryExtended = "LS"
	LT CountryExtended = "LT"
	LU CountryExtended = "LU"
	LV CountryExtended = "LV"
	LY CountryExtended = "LY"
	MA CountryExtended = "MA"
	MC CountryExtended = "MC"
	MD CountryExtended = "MD"
	ME CountryExtended = "ME"
	MG CountryExtended = "MG"
	MK CountryExtended = "MK"
	ML CountryExtended = "ML"
	MM CountryExtended = "MM"
	MN CountryExtended = "MN"
	MO CountryExtended = "MO"
	MR CountryExtended = "MR"
	MS CountryExtended = "MS"
	MT CountryExtended = "MT"
	MU CountryExtended = "MU"
	MV CountryExtended = "MV"
	MW CountryExtended = "MW"
	MX CountryExtended = "MX"
	MY CountryExtended = "MY"
	MZ CountryExtended = "MZ"
	NA CountryExtended = "NA"
	NE CountryExtended = "NE"
	NF CountryExtended = "NF"
	NG CountryExtended = "NG"
	NI CountryExtended = "NI"
	NL CountryExtended = "NL"
	NO CountryExtended = "NO"
	NP CountryExtended = "NP"
	NR CountryExtended = "NR"
	NU CountryExtended = "NU"
	NZ CountryExtended = "NZ"
	OM CountryExtended = "OM"
	PA CountryExtended = "PA"
	PE CountryExtended = "PE"
	PG CountryExtended = "PG"
	PH CountryExtended = "PH"
	PK CountryExtended = "PK"
	PL CountryExtended = "PL"
	PN CountryExtended = "PN"
	PT CountryExtended = "PT"
	PY CountryExtended = "PY"
	QA CountryExtended = "QA"
	RO CountryExtended = "RO"
	RS CountryExtended = "RS"
	RU CountryExtended = "RU"
	RW CountryExtended = "RW"
	SA CountryExtended = "SA"
	SB CountryExtended = "SB"
	SC CountryExtended = "SC"
	SD CountryExtended = "SD"
	SE CountryExtended = "SE"
	SG CountryExtended = "SG"
	SH CountryExtended = "SH"
	SI CountryExtended = "SI"
	SK CountryExtended = "SK"
	SL CountryExtended = "SL"
	SM CountryExtended = "SM"
	SN CountryExtended = "SN"
	SO CountryExtended = "SO"
	SR CountryExtended = "SR"
	SS CountryExtended = "SS"
	ST CountryExtended = "ST"
	SV CountryExtended = "SV"
	SX CountryExtended = "SX"
	SY CountryExtended = "SY"
	SZ CountryExtended = "SZ"
	TC CountryExtended = "TC"
	TD CountryExtended = "TD"
	TG CountryExtended = "TG"
	TH CountryExtended = "TH"
	TJ CountryExtended = "TJ"
	TK CountryExtended = "TK"
	TL CountryExtended = "TL"
	TM CountryExtended = "TM"
	TN CountryExtended = "TN"
	TO CountryExtended = "TO"
	TR CountryExtended = "TR"
	TT CountryExtended = "TT"
	TV CountryExtended = "TV"
	TW CountryExtended = "TW"
	TZ CountryExtended = "TZ"
	UA CountryExtended = "UA"
	UG CountryExtended = "UG"
	US CountryExtended = "US"
	UY CountryExtended = "UY"
	UZ CountryExtended = "UZ"
	VA CountryExtended = "VA"
	VC CountryExtended = "VC"
	VE CountryExtended = "VE"
	VG CountryExtended = "VG"
	VN CountryExtended = "VN"
	VU CountryExtended = "VU"
	WS CountryExtended = "WS"
	YE CountryExtended = "YE"
	ZA CountryExtended = "ZA"
	ZM CountryExtended = "ZM"
	ZW CountryExtended = "ZW"
)

// All allowed values of CountryExtended enum
var AllowedCountryExtendedEnumValues = []CountryExtended{
	"AD",
	"AE",
	"AF",
	"AG",
	"AI",
	"AL",
	"AN",
	"AO",
	"AQ",
	"AR",
	"AT",
	"AU",
	"AW",
	"AZ",
	"BA",
	"BB",
	"BD",
	"BE",
	"BF",
	"BG",
	"BH",
	"BI",
	"BJ",
	"BM",
	"BN",
	"BO",
	"BQ",
	"BR",
	"BS",
	"BT",
	"BW",
	"BY",
	"BZ",
	"CA",
	"CD",
	"CG",
	"CH",
	"CI",
	"CK",
	"CL",
	"CM",
	"CN",
	"CO",
	"CR",
	"CS",
	"CU",
	"CV",
	"CW",
	"CY",
	"CZ",
	"DE",
	"DJ",
	"DK",
	"DM",
	"DO",
	"DZ",
	"EC",
	"EE",
	"EG",
	"EH",
	"ER",
	"ES",
	"ET",
	"FI",
	"FJ",
	"FK",
	"FO",
	"FR",
	"GA",
	"GB",
	"GD",
	"GE",
	"GH",
	"GI",
	"GL",
	"GM",
	"GN",
	"GQ",
	"GR",
	"GS",
	"GT",
	"GW",
	"GY",
	"HK",
	"HN",
	"HR",
	"HT",
	"HU",
	"ID",
	"IE",
	"IL",
	"IN",
	"IO",
	"IQ",
	"IR",
	"IS",
	"IT",
	"JM",
	"JO",
	"JP",
	"KE",
	"KG",
	"KH",
	"KI",
	"KM",
	"KN",
	"KP",
	"KR",
	"KW",
	"KY",
	"KZ",
	"LA",
	"LB",
	"LC",
	"LI",
	"LK",
	"LR",
	"LS",
	"LT",
	"LU",
	"LV",
	"LY",
	"MA",
	"MC",
	"MD",
	"ME",
	"MG",
	"MK",
	"ML",
	"MM",
	"MN",
	"MO",
	"MR",
	"MS",
	"MT",
	"MU",
	"MV",
	"MW",
	"MX",
	"MY",
	"MZ",
	"NA",
	"NE",
	"NF",
	"NG",
	"NI",
	"NL",
	"NO",
	"NP",
	"NR",
	"NU",
	"NZ",
	"OM",
	"PA",
	"PE",
	"PG",
	"PH",
	"PK",
	"PL",
	"PN",
	"PT",
	"PY",
	"QA",
	"RO",
	"RS",
	"RU",
	"RW",
	"SA",
	"SB",
	"SC",
	"SD",
	"SE",
	"SG",
	"SH",
	"SI",
	"SK",
	"SL",
	"SM",
	"SN",
	"SO",
	"SR",
	"SS",
	"ST",
	"SV",
	"SX",
	"SY",
	"SZ",
	"TC",
	"TD",
	"TG",
	"TH",
	"TJ",
	"TK",
	"TL",
	"TM",
	"TN",
	"TO",
	"TR",
	"TT",
	"TV",
	"TW",
	"TZ",
	"UA",
	"UG",
	"US",
	"UY",
	"UZ",
	"VA",
	"VC",
	"VE",
	"VG",
	"VN",
	"VU",
	"WS",
	"YE",
	"ZA",
	"ZM",
	"ZW",
}

func (v *CountryExtended) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CountryExtended(value)
	for _, existing := range AllowedCountryExtendedEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CountryExtended", value)
}

// NewCountryExtendedFromValue returns a pointer to a valid CountryExtended
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCountryExtendedFromValue(v string) (*CountryExtended, error) {
	ev := CountryExtended(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CountryExtended: valid values are %v", v, AllowedCountryExtendedEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CountryExtended) IsValid() bool {
	for _, existing := range AllowedCountryExtendedEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to country_extended value
func (v CountryExtended) Ptr() *CountryExtended {
	return &v
}

type NullableCountryExtended struct {
	value *CountryExtended
	isSet bool
}

func (v NullableCountryExtended) Get() *CountryExtended {
	return v.value
}

func (v *NullableCountryExtended) Set(val *CountryExtended) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryExtended) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryExtended) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryExtended(val *CountryExtended) *NullableCountryExtended {
	return &NullableCountryExtended{value: val, isSet: true}
}

func (v NullableCountryExtended) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryExtended) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

