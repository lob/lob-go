/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob.go

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// BillingGroupsApiService BillingGroupsApi service
type BillingGroupsApiService service

type ApiBillingGroupCreateRequest struct {
	ctx context.Context
	ApiService *BillingGroupsApiService
	billingGroupEditable *BillingGroupEditable
}

func (r ApiBillingGroupCreateRequest) BillingGroupEditable(billingGroupEditable BillingGroupEditable) ApiBillingGroupCreateRequest {
	r.billingGroupEditable = &billingGroupEditable
	return r
}

func (r ApiBillingGroupCreateRequest) Execute() (*BillingGroup, *http.Response, error) {
	return r.ApiService.BillingGroupCreateExecute(r)
}

/*
BillingGroupCreate create

Creates a new billing_group with the provided properties.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBillingGroupCreateRequest
*/
func (a *BillingGroupsApiService) BillingGroupCreate(ctx context.Context) ApiBillingGroupCreateRequest {
	return ApiBillingGroupCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BillingGroup
func (a *BillingGroupsApiService) BillingGroupCreateExecute(r ApiBillingGroupCreateRequest) (*BillingGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingGroupsApiService.BillingGroupCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing_groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.billingGroupEditable == nil {
		return localVarReturnValue, nil, reportError("billingGroupEditable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.billingGroupEditable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v LobError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBillingGroupRetrieveRequest struct {
	ctx context.Context
	ApiService *BillingGroupsApiService
	bgId string
}

func (r ApiBillingGroupRetrieveRequest) Execute() (*BillingGroup, *http.Response, error) {
	return r.ApiService.BillingGroupRetrieveExecute(r)
}

/*
BillingGroupRetrieve get

Retrieves the details of an existing billing_group. You need only supply the unique billing_group identifier that was returned upon billing_group creation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bgId id of the billing_group
 @return ApiBillingGroupRetrieveRequest
*/
func (a *BillingGroupsApiService) BillingGroupRetrieve(ctx context.Context, bgId string) ApiBillingGroupRetrieveRequest {
	return ApiBillingGroupRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		bgId: bgId,
	}
}

// Execute executes the request
//  @return BillingGroup
func (a *BillingGroupsApiService) BillingGroupRetrieveExecute(r ApiBillingGroupRetrieveRequest) (*BillingGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingGroupsApiService.BillingGroupRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing_groups/{bg_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bg_id"+"}", url.PathEscape(parameterToString(r.bgId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v LobError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBillingGroupUpdateRequest struct {
	ctx context.Context
	ApiService *BillingGroupsApiService
	bgId string
	billingGroupEditable *BillingGroupEditable
}

func (r ApiBillingGroupUpdateRequest) BillingGroupEditable(billingGroupEditable BillingGroupEditable) ApiBillingGroupUpdateRequest {
	r.billingGroupEditable = &billingGroupEditable
	return r
}

func (r ApiBillingGroupUpdateRequest) Execute() (*BillingGroup, *http.Response, error) {
	return r.ApiService.BillingGroupUpdateExecute(r)
}

/*
BillingGroupUpdate update

Updates all editable attributes of the billing_group with the given id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bgId id of the billing_group
 @return ApiBillingGroupUpdateRequest
*/
func (a *BillingGroupsApiService) BillingGroupUpdate(ctx context.Context, bgId string) ApiBillingGroupUpdateRequest {
	return ApiBillingGroupUpdateRequest{
		ApiService: a,
		ctx: ctx,
		bgId: bgId,
	}
}

// Execute executes the request
//  @return BillingGroup
func (a *BillingGroupsApiService) BillingGroupUpdateExecute(r ApiBillingGroupUpdateRequest) (*BillingGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingGroupsApiService.BillingGroupUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing_groups/{bg_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bg_id"+"}", url.PathEscape(parameterToString(r.bgId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.billingGroupEditable == nil {
		return localVarReturnValue, nil, reportError("billingGroupEditable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.billingGroupEditable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v LobError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBillingGroupsListRequest struct {
	ctx context.Context
	ApiService *BillingGroupsApiService
	limit *int32
	offset *int32
	include *[]string
	dateCreated *map[string]time.Time
	dateModified *map[string]string
	sortByDateModified *SortByDateModified
}

// How many results to return.
func (r ApiBillingGroupsListRequest) Limit(limit int32) ApiBillingGroupsListRequest {
	r.limit = &limit
	return r
}

// An integer that designates the offset at which to begin returning results. Defaults to 0.
func (r ApiBillingGroupsListRequest) Offset(offset int32) ApiBillingGroupsListRequest {
	r.offset = &offset
	return r
}

// Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;. 
func (r ApiBillingGroupsListRequest) Include(include []string) ApiBillingGroupsListRequest {
	r.include = &include
	return r
}

// Filter by date created.
func (r ApiBillingGroupsListRequest) DateCreated(dateCreated map[string]time.Time) ApiBillingGroupsListRequest {
	r.dateCreated = &dateCreated
	return r
}

// Filter by date modified.
func (r ApiBillingGroupsListRequest) DateModified(dateModified map[string]string) ApiBillingGroupsListRequest {
	r.dateModified = &dateModified
	return r
}

// Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;date_modfied&#x60;, not both. 
func (r ApiBillingGroupsListRequest) SortByDateModified(sortByDateModified SortByDateModified) ApiBillingGroupsListRequest {
	r.sortByDateModified = &sortByDateModified
	return r
}

func (r ApiBillingGroupsListRequest) Execute() (*BillingGroupList, *http.Response, error) {
	return r.ApiService.BillingGroupsListExecute(r)
}

/*
BillingGroupsList list

Returns a list of your billing_groups. The billing_groups are returned sorted by creation date, with the most recently created billing_groups appearing first.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBillingGroupsListRequest
*/
func (a *BillingGroupsApiService) BillingGroupsList(ctx context.Context) ApiBillingGroupsListRequest {
	return ApiBillingGroupsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BillingGroupList
func (a *BillingGroupsApiService) BillingGroupsListExecute(r ApiBillingGroupsListRequest) (*BillingGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingGroupsApiService.BillingGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing_groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.include != nil {
		t := *r.include
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("include", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("include", parameterToString(t, "multi"))
		}
	}
	if r.dateCreated != nil {
		localVarQueryParams.Add("date_created", parameterToString(*r.dateCreated, ""))
	}
	if r.dateModified != nil {
		localVarQueryParams.Add("date_modified", parameterToString(*r.dateModified, ""))
	}
	if r.sortByDateModified != nil {
		localVarQueryParams.Add("sort_by_date_modified", parameterToString(*r.sortByDateModified, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v LobError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
