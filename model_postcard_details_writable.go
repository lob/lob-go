/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob.go

import (
	"encoding/json"
)

// PostcardDetailsWritable Properties that the postcards in your Creative should have.
type PostcardDetailsWritable struct {
	MailType *MailType `json:"mail_type,omitempty"`
	Size *PostcardSize `json:"size,omitempty"`
}

// NewPostcardDetailsWritable instantiates a new PostcardDetailsWritable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostcardDetailsWritable() *PostcardDetailsWritable {
	this := PostcardDetailsWritable{}
	var mailType MailType = FIRST_CLASS
	this.MailType = &mailType
	var size PostcardSize = _4X6
	this.Size = &size
	return &this
}

// NewPostcardDetailsWritableWithDefaults instantiates a new PostcardDetailsWritable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostcardDetailsWritableWithDefaults() *PostcardDetailsWritable {
	this := PostcardDetailsWritable{}
	var mailType MailType = FIRST_CLASS
	this.MailType = &mailType
	var size PostcardSize = _4X6
	this.Size = &size
	return &this
}

// GetMailType returns the MailType field value if set, zero value otherwise.
func (o *PostcardDetailsWritable) GetMailType() MailType {
	if o == nil || o.MailType == nil {
		var ret MailType
		return ret
	}
	return *o.MailType
}

// GetMailTypeOk returns a tuple with the MailType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostcardDetailsWritable) GetMailTypeOk() (*MailType, bool) {
	if o == nil || o.MailType == nil {
		return nil, false
	}
	return o.MailType, true
}

// HasMailType returns a boolean if a field has been set.
func (o *PostcardDetailsWritable) HasMailType() bool {
	if o != nil && o.MailType != nil {
		return true
	}

	return false
}

// SetMailType gets a reference to the given MailType and assigns it to the MailType field.
func (o *PostcardDetailsWritable) SetMailType(v MailType) {
	o.MailType = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PostcardDetailsWritable) GetSize() PostcardSize {
	if o == nil || o.Size == nil {
		var ret PostcardSize
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostcardDetailsWritable) GetSizeOk() (*PostcardSize, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PostcardDetailsWritable) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given PostcardSize and assigns it to the Size field.
func (o *PostcardDetailsWritable) SetSize(v PostcardSize) {
	o.Size = &v
}

func (o PostcardDetailsWritable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MailType != nil {
		toSerialize["mail_type"] = o.MailType
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullablePostcardDetailsWritable struct {
	value *PostcardDetailsWritable
	isSet bool
}

func (v NullablePostcardDetailsWritable) Get() *PostcardDetailsWritable {
	return v.value
}

func (v *NullablePostcardDetailsWritable) Set(val *PostcardDetailsWritable) {
	v.value = val
	v.isSet = true
}

func (v NullablePostcardDetailsWritable) IsSet() bool {
	return v.isSet
}

func (v *NullablePostcardDetailsWritable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostcardDetailsWritable(val *PostcardDetailsWritable) *NullablePostcardDetailsWritable {
	return &NullablePostcardDetailsWritable{value: val, isSet: true}
}

func (v NullablePostcardDetailsWritable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostcardDetailsWritable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


