/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
)

// AddressDeletion Object returned upon deleting an address
type AddressDeletion struct {
	// Unique identifier prefixed with `adr_`.
	Id *string `json:"id,omitempty"`
	// Only returned if the resource has been successfully deleted.
	Deleted *bool `json:"deleted,omitempty"`
	// Value is type of resource.
	Object *string `json:"object,omitempty"`
}

// NewAddressDeletion instantiates a new AddressDeletion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressDeletion() *AddressDeletion {
	this := AddressDeletion{}
	var object string = "address_deleted"
	this.Object = &object
	return &this
}

// NewAddressDeletionWithDefaults instantiates a new AddressDeletion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressDeletionWithDefaults() *AddressDeletion {
	this := AddressDeletion{}
	var object string = "address_deleted"
	this.Object = &object
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddressDeletion) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressDeletion) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddressDeletion) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddressDeletion) SetId(v string) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *AddressDeletion) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressDeletion) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *AddressDeletion) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *AddressDeletion) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *AddressDeletion) GetObject() string {
	if o == nil || o.Object == nil {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressDeletion) GetObjectOk() (*string, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *AddressDeletion) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *AddressDeletion) SetObject(v string) {
	o.Object = &v
}

func (o AddressDeletion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	return json.Marshal(toSerialize)
}

type NullableAddressDeletion struct {
	value *AddressDeletion
	isSet bool
}

func (v NullableAddressDeletion) Get() *AddressDeletion {
	return v.value
}

func (v *NullableAddressDeletion) Set(val *AddressDeletion) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressDeletion) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressDeletion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressDeletion(val *AddressDeletion) *NullableAddressDeletion {
	return &NullableAddressDeletion{value: val, isSet: true}
}

func (v NullableAddressDeletion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressDeletion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


