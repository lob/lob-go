/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	"fmt"
)

// UploadState The `state` property on the `upload` object. As the file is processed, the `state` will change from `Ready for Validation` to `Validating` and then will be either `Scheduled` (successfully processed) or `Errored` (Unsuccessfully processed).
type UploadState string

// List of upload_state
const (
	UPLOADSTATE_PREPROCESSING UploadState = "Preprocessing"
	UPLOADSTATE_DRAFT UploadState = "Draft"
	UPLOADSTATE_READY_FOR_VALIDATION UploadState = "Ready for Validation"
	UPLOADSTATE_VALIDATING UploadState = "Validating"
	UPLOADSTATE_SCHEDULED UploadState = "Scheduled"
	UPLOADSTATE_CANCELLED UploadState = "Cancelled"
	UPLOADSTATE_ERRORED UploadState = "Errored"
)

// All allowed values of UploadState enum
var AllowedUploadStateEnumValues = []UploadState{
	"Preprocessing",
	"Draft",
	"Ready for Validation",
	"Validating",
	"Scheduled",
	"Cancelled",
	"Errored",
}

func (v *UploadState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UploadState(value)
	for _, existing := range AllowedUploadStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UploadState", value)
}

// NewUploadStateFromValue returns a pointer to a valid UploadState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUploadStateFromValue(v string) (*UploadState, error) {
	ev := UploadState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UploadState: valid values are %v", v, AllowedUploadStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UploadState) IsValid() bool {
	for _, existing := range AllowedUploadStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to upload_state value
func (v UploadState) Ptr() *UploadState {
	return &v
}

type NullableUploadState struct {
	value *UploadState
	isSet bool
}

func (v NullableUploadState) Get() *UploadState {
	return v.value
}

func (v *NullableUploadState) Set(val *UploadState) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadState) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadState(val *UploadState) *NullableUploadState {
	return &NullableUploadState{value: val, isSet: true}
}

func (v NullableUploadState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

