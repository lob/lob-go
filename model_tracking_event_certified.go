/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
	"time"
)

// TrackingEventCertified struct for TrackingEventCertified
type TrackingEventCertified struct {
	// a Certified letter tracking event
	Type string `json:"type"`
	// Name of tracking event for Certified letters. Letters sent with USPS Certified Mail are fully tracked by USPS, therefore their tracking events have an additional details object with more detailed information about the tracking event. Some certified tracking event names have multiple meanings, noted in the list here. See the description of the details object for the full set of combined certified tracking event name meanings.    * `Mailed` - Package has been accepted into the carrier network for delivery.    * `In Transit` - Maps to four distinct stages of transit.    * `In Local Area` - Package is at a location near the end destination.    * `Processed for Delivery` - Maps to two distinct stages of delivery.    * `Pickup Available` - Package is available for pickup at carrier location.    * `Delivered` - Package has been delivered.    * `Re-Routed` - Package has been forwarded.    * `Returned to Sender` - Package is to be returned to sender.    * `Issue` - Maps to (at least) 15 possible issues, some of which are actionable. 
	Name string `json:"name"`
	Details *TrackingEventDetails `json:"details,omitempty"`
	// The zip code in which the event occurred if it exists, otherwise will be the name of a Regional Distribution Center if it exists, otherwise will be null. 
	Location NullableString `json:"location,omitempty"`
	// Unique identifier prefixed with `evnt_`.
	Id string `json:"id"`
	// A timestamp in ISO 8601 format of the date USPS registered the event.
	Time *time.Time `json:"time,omitempty"`
	// A timestamp in ISO 8601 format of the date the resource was created.
	DateCreated time.Time `json:"date_created"`
	// A timestamp in ISO 8601 format of the date the resource was last modified.
	DateModified time.Time `json:"date_modified"`
	Object string `json:"object"`
}

// NewTrackingEventCertified instantiates a new TrackingEventCertified object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackingEventCertified(type_ string, name string, id string, dateCreated time.Time, dateModified time.Time, object string) *TrackingEventCertified {
	this := TrackingEventCertified{}
	this.Type = type_
	this.Name = name
	this.Id = id
	this.DateCreated = dateCreated
	this.DateModified = dateModified
	this.Object = object
	return &this
}

// NewTrackingEventCertifiedWithDefaults instantiates a new TrackingEventCertified object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackingEventCertifiedWithDefaults() *TrackingEventCertified {
	this := TrackingEventCertified{}
	var object string = "tracking_event"
	this.Object = object
	return &this
}

// GetType returns the Type field value
func (o *TrackingEventCertified) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TrackingEventCertified) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TrackingEventCertified) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *TrackingEventCertified) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TrackingEventCertified) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TrackingEventCertified) SetName(v string) {
	o.Name = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *TrackingEventCertified) GetDetails() TrackingEventDetails {
	if o == nil || o.Details == nil {
		var ret TrackingEventDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventCertified) GetDetailsOk() (*TrackingEventDetails, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *TrackingEventCertified) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given TrackingEventDetails and assigns it to the Details field.
func (o *TrackingEventCertified) SetDetails(v TrackingEventDetails) {
	o.Details = &v
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrackingEventCertified) GetLocation() string {
	if o == nil || o.Location.Get() == nil {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrackingEventCertified) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *TrackingEventCertified) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *TrackingEventCertified) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *TrackingEventCertified) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *TrackingEventCertified) UnsetLocation() {
	o.Location.Unset()
}

// GetId returns the Id field value
func (o *TrackingEventCertified) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TrackingEventCertified) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TrackingEventCertified) SetId(v string) {
	o.Id = v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *TrackingEventCertified) GetTime() time.Time {
	if o == nil || o.Time == nil {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventCertified) GetTimeOk() (*time.Time, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *TrackingEventCertified) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *TrackingEventCertified) SetTime(v time.Time) {
	o.Time = &v
}

// GetDateCreated returns the DateCreated field value
func (o *TrackingEventCertified) GetDateCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value
// and a boolean to check if the value has been set.
func (o *TrackingEventCertified) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateCreated, true
}

// SetDateCreated sets field value
func (o *TrackingEventCertified) SetDateCreated(v time.Time) {
	o.DateCreated = v
}

// GetDateModified returns the DateModified field value
func (o *TrackingEventCertified) GetDateModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value
// and a boolean to check if the value has been set.
func (o *TrackingEventCertified) GetDateModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateModified, true
}

// SetDateModified sets field value
func (o *TrackingEventCertified) SetDateModified(v time.Time) {
	o.DateModified = v
}

// GetObject returns the Object field value
func (o *TrackingEventCertified) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *TrackingEventCertified) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *TrackingEventCertified) SetObject(v string) {
	o.Object = v
}

func (o TrackingEventCertified) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if true {
		toSerialize["date_created"] = o.DateCreated
	}
	if true {
		toSerialize["date_modified"] = o.DateModified
	}
	if true {
		toSerialize["object"] = o.Object
	}
	return json.Marshal(toSerialize)
}

type NullableTrackingEventCertified struct {
	value *TrackingEventCertified
	isSet bool
}

func (v NullableTrackingEventCertified) Get() *TrackingEventCertified {
	return v.value
}

func (v *NullableTrackingEventCertified) Set(val *TrackingEventCertified) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackingEventCertified) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackingEventCertified) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackingEventCertified(val *TrackingEventCertified) *NullableTrackingEventCertified {
	return &NullableTrackingEventCertified{value: val, isSet: true}
}

func (v NullableTrackingEventCertified) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackingEventCertified) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


