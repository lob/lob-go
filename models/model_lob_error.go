/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob.go

import (
	"encoding/json"
)

// LobError Lob uses RESTful HTTP response codes to indicate success or failure of an API request.
type LobError struct {
	// A human-readable message with more details about the error
	Message *string `json:"message,omitempty"`
	// A conventional HTTP status code.
	StatusCode *int32 `json:"status_code,omitempty"`
	// A pre-defined string identifying an error.
	Code *string `json:"code,omitempty"`
}

// NewLobError instantiates a new LobError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLobError() *LobError {
	this := LobError{}
	return &this
}

// NewLobErrorWithDefaults instantiates a new LobError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLobErrorWithDefaults() *LobError {
	this := LobError{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *LobError) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LobError) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *LobError) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *LobError) SetMessage(v string) {
	o.Message = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *LobError) GetStatusCode() int32 {
	if o == nil || o.StatusCode == nil {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LobError) GetStatusCodeOk() (*int32, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *LobError) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *LobError) SetStatusCode(v int32) {
	o.StatusCode = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *LobError) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LobError) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *LobError) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *LobError) SetCode(v string) {
	o.Code = &v
}

func (o LobError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.StatusCode != nil {
		toSerialize["status_code"] = o.StatusCode
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	return json.Marshal(toSerialize)
}

type NullableLobError struct {
	value *LobError
	isSet bool
}

func (v NullableLobError) Get() *LobError {
	return v.value
}

func (v *NullableLobError) Set(val *LobError) {
	v.value = val
	v.isSet = true
}

func (v NullableLobError) IsSet() bool {
	return v.isSet
}

func (v *NullableLobError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLobError(val *LobError) *NullableLobError {
	return &NullableLobError{value: val, isSet: true}
}

func (v NullableLobError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLobError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


