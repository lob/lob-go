/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob.go

import (
	"encoding/json"
	"time"
)

// Events struct for Events
type Events struct {
	// Unique identifier prefixed with `evt_`.
	Id string `json:"id"`
	// The body of the associated resource as they were at the time of the event, i.e. the [postcard object](https://docs.lob.com/#tag/Postcards/operation/postcard_retrieve), [the letter object](https://docs.lob.com/#tag/Letters/operation/letter_retrieve), [the check object](https://docs.lob.com/#tag/Checks/operation/check_retrieve), [the address object](https://docs.lob.com/#tag/Addresses/operation/address_retrieve), or [the bank account object](https://docs.lob.com/#tag/Bank-Accounts/operation/bank_account_retrieve). For `.deleted` events, the body matches the response for the corresponding delete endpoint for that resource (e.g. the [postcard cancel response](https://docs.lob.com/#tag/Postcards/operation/postcard_delete)).
	Body map[string]interface{} `json:"body"`
	// Unique identifier of the related resource for the event.
	ReferenceId string `json:"reference_id"`
	EventType EventType `json:"event_type"`
	// A timestamp in ISO 8601 format of the date the resource was created.
	DateCreated time.Time `json:"date_created"`
	// Value is resource type.
	Object string `json:"object"`
}

// NewEvents instantiates a new Events object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvents(id string, body map[string]interface{}, referenceId string, eventType EventType, dateCreated time.Time, object string) *Events {
	this := Events{}
	this.Id = id
	this.Body = body
	this.ReferenceId = referenceId
	this.EventType = eventType
	this.DateCreated = dateCreated
	this.Object = object
	return &this
}

// NewEventsWithDefaults instantiates a new Events object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsWithDefaults() *Events {
	this := Events{}
	var object string = "event"
	this.Object = object
	return &this
}

// GetId returns the Id field value
func (o *Events) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Events) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Events) SetId(v string) {
	o.Id = v
}

// GetBody returns the Body field value
func (o *Events) GetBody() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *Events) GetBodyOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Body, true
}

// SetBody sets field value
func (o *Events) SetBody(v map[string]interface{}) {
	o.Body = v
}

// GetReferenceId returns the ReferenceId field value
func (o *Events) GetReferenceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value
// and a boolean to check if the value has been set.
func (o *Events) GetReferenceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceId, true
}

// SetReferenceId sets field value
func (o *Events) SetReferenceId(v string) {
	o.ReferenceId = v
}

// GetEventType returns the EventType field value
func (o *Events) GetEventType() EventType {
	if o == nil {
		var ret EventType
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *Events) GetEventTypeOk() (*EventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *Events) SetEventType(v EventType) {
	o.EventType = v
}

// GetDateCreated returns the DateCreated field value
func (o *Events) GetDateCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value
// and a boolean to check if the value has been set.
func (o *Events) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateCreated, true
}

// SetDateCreated sets field value
func (o *Events) SetDateCreated(v time.Time) {
	o.DateCreated = v
}

// GetObject returns the Object field value
func (o *Events) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Events) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Events) SetObject(v string) {
	o.Object = v
}

func (o Events) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["body"] = o.Body
	}
	if true {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if true {
		toSerialize["event_type"] = o.EventType
	}
	if true {
		toSerialize["date_created"] = o.DateCreated
	}
	if true {
		toSerialize["object"] = o.Object
	}
	return json.Marshal(toSerialize)
}

type NullableEvents struct {
	value *Events
	isSet bool
}

func (v NullableEvents) Get() *Events {
	return v.value
}

func (v *NullableEvents) Set(val *Events) {
	v.value = val
	v.isSet = true
}

func (v NullableEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvents(val *Events) *NullableEvents {
	return &NullableEvents{value: val, isSet: true}
}

func (v NullableEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


