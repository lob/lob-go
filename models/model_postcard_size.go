/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob.go

import (
	"encoding/json"
	"fmt"
)

// PostcardSize Specifies the size of the postcard. Only `4x6` postcards can be sent to international destinations. 
type PostcardSize string

// List of postcard_size
const (
	_4X6 PostcardSize = "4x6"
	_6X9 PostcardSize = "6x9"
	_6X11 PostcardSize = "6x11"
)

// All allowed values of PostcardSize enum
var AllowedPostcardSizeEnumValues = []PostcardSize{
	"4x6",
	"6x9",
	"6x11",
}

func (v *PostcardSize) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PostcardSize(value)
	for _, existing := range AllowedPostcardSizeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PostcardSize", value)
}

// NewPostcardSizeFromValue returns a pointer to a valid PostcardSize
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPostcardSizeFromValue(v string) (*PostcardSize, error) {
	ev := PostcardSize(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PostcardSize: valid values are %v", v, AllowedPostcardSizeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PostcardSize) IsValid() bool {
	for _, existing := range AllowedPostcardSizeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to postcard_size value
func (v PostcardSize) Ptr() *PostcardSize {
	return &v
}

type NullablePostcardSize struct {
	value *PostcardSize
	isSet bool
}

func (v NullablePostcardSize) Get() *PostcardSize {
	return v.value
}

func (v *NullablePostcardSize) Set(val *PostcardSize) {
	v.value = val
	v.isSet = true
}

func (v NullablePostcardSize) IsSet() bool {
	return v.isSet
}

func (v *NullablePostcardSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostcardSize(val *PostcardSize) *NullablePostcardSize {
	return &NullablePostcardSize{value: val, isSet: true}
}

func (v NullablePostcardSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostcardSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

