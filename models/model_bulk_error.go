/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob.go

import (
	"encoding/json"
)

// BulkError Lob uses RESTful HTTP response codes to indicate success or failure of an API request.
type BulkError struct {
	Error *BulkErrorProperties `json:"error,omitempty"`
}

// NewBulkError instantiates a new BulkError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkError() *BulkError {
	this := BulkError{}
	return &this
}

// NewBulkErrorWithDefaults instantiates a new BulkError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkErrorWithDefaults() *BulkError {
	this := BulkError{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *BulkError) GetError() BulkErrorProperties {
	if o == nil || o.Error == nil {
		var ret BulkErrorProperties
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkError) GetErrorOk() (*BulkErrorProperties, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *BulkError) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given BulkErrorProperties and assigns it to the Error field.
func (o *BulkError) SetError(v BulkErrorProperties) {
	o.Error = &v
}

func (o BulkError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableBulkError struct {
	value *BulkError
	isSet bool
}

func (v NullableBulkError) Get() *BulkError {
	return v.value
}

func (v *NullableBulkError) Set(val *BulkError) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkError) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkError(val *BulkError) *NullableBulkError {
	return &NullableBulkError{value: val, isSet: true}
}

func (v NullableBulkError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


