/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob.go

import (
	"encoding/json"
	"time"
)

// LetterEditable struct for LetterEditable
type LetterEditable struct {
	// An internal description that identifies this resource. Must be no longer than 255 characters. 
	Description NullableString `json:"description,omitempty"`
	// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters `\"` and `\\`. i.e. '{\"customer_id\" : \"NEWYORK2015\"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
	Metadata *map[string]string `json:"metadata,omitempty"`
	MailType *MailType `json:"mail_type,omitempty"`
	// You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: `{{variable_name}}`, pass in `{\"variable_name\": \"Harry\"}` to render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: `!`, `\"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `<`, `=`, `>`, `@`, `[`, `\\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string.
	MergeVariables map[string]interface{} `json:"merge_variables,omitempty"`
	// A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the `send_date` has passed, the mailpiece can be canceled. If a date in the format `2017-11-01` is passed, it will evaluate to midnight UTC of that date (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a time zone will be converted to UTC.
	SendDate *time.Time `json:"send_date,omitempty"`
	// Set this key to `true` if you would like to print in color. Set to `false` if you would like to print in black and white.
	Color bool `json:"color"`
	// Set this attribute to `true` for double sided printing, or `false` for for single sided printing. Defaults to `true`.
	DoubleSided *bool `json:"double_sided,omitempty"`
	// Specifies the location of the address information that will show through the double-window envelope. To see how this will impact your letter design, view our letter template.   * `top_first_page` - (default) print address information at the top of your provided first page   * `insert_blank_page` - insert a blank address page at the beginning of your file (you will be charged for the extra page)   * `bottom_first_page_center` - **(deprecation planned within a few months)** print address information at the bottom center of your provided first page   * `bottom_first_page` - print address information at the bottom of your provided first page 
	AddressPlacement *string `json:"address_placement,omitempty"`
	// indicates if a return envelope is requested for the letter. The value corresponding to this field is by default a boolean. But if the account is signed up for custom return envelopes, the value is of type string and is `no_9_single_window` for a standard return envelope and a custom `return_envelope_id` for non-standard return envelopes.  To include a return envelope with your letter, set to `true` and specify the `perforated_page`. See [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred.
	ReturnEnvelope interface{} `json:"return_envelope,omitempty"`
	// Required if `return_envelope` is `true`. The number of the page that should be perforated for use with the return envelope. Must be greater than or equal to `1`. The blank page added by `address_placement=insert_blank_page` will be ignored when considering the perforated page number. To see how perforation will impact your letter design, view our [perforation guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).
	PerforatedPage NullableInt32 `json:"perforated_page,omitempty"`
	CustomEnvelope NullableString `json:"custom_envelope,omitempty"`
	// Must either be an address ID or an inline object with correct address parameters.
	To string `json:"to"`
	// Must either be an address ID or an inline object with correct address parameters.
	From string `json:"from"`
	// PDF file containing the letter's formatting.
	File string `json:"file"`
	// Add an extra service to your letter:   * `certified` - track and confirm delivery for domestic destinations. An extra sheet (1 PDF page single-sided or 2 PDF pages double-sided) is added to the beginning of your letter for address and barcode information. See here for templates: [#10 envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf) and [flat envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf) (used for letters over 6 pages single-sided or 12 pages double-sided). You will not be charged for this extra sheet.   * `certified_return_receipt` - request an electronic copy of the recipient's signature to prove delivery of your certified letter   * `registered` - provides tracking and confirmation for international addresses 
	ExtraService NullableString `json:"extra_service,omitempty"`
	// A single-element array containing an existing card id in a string format. See [cards](#tag/Cards) for more information.
	Cards []string `json:"cards,omitempty"`
	// An optional string with the billing group ID to tag your usage with. Is used for billing purposes. Requires special activation to use. See [Billing Group API](https://lob.github.io/lob-openapi/#tag/Billing-Groups) for more information.
	BillingGroupId *string `json:"billing_group_id,omitempty"`
}

// NewLetterEditable instantiates a new LetterEditable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLetterEditable(color bool, to string, from string, file string) *LetterEditable {
	this := LetterEditable{}
	var mailType MailType = FIRST_CLASS
	this.MailType = &mailType
	this.Color = color
	var doubleSided bool = true
	this.DoubleSided = &doubleSided
	var addressPlacement string = "top_first_page"
	this.AddressPlacement = &addressPlacement
	this.To = to
	this.From = from
	this.File = file
	return &this
}

// NewLetterEditableWithDefaults instantiates a new LetterEditable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLetterEditableWithDefaults() *LetterEditable {
	this := LetterEditable{}
	var mailType MailType = FIRST_CLASS
	this.MailType = &mailType
	var doubleSided bool = true
	this.DoubleSided = &doubleSided
	var addressPlacement string = "top_first_page"
	this.AddressPlacement = &addressPlacement
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LetterEditable) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LetterEditable) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *LetterEditable) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *LetterEditable) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *LetterEditable) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *LetterEditable) UnsetDescription() {
	o.Description.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *LetterEditable) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LetterEditable) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *LetterEditable) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *LetterEditable) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetMailType returns the MailType field value if set, zero value otherwise.
func (o *LetterEditable) GetMailType() MailType {
	if o == nil || o.MailType == nil {
		var ret MailType
		return ret
	}
	return *o.MailType
}

// GetMailTypeOk returns a tuple with the MailType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LetterEditable) GetMailTypeOk() (*MailType, bool) {
	if o == nil || o.MailType == nil {
		return nil, false
	}
	return o.MailType, true
}

// HasMailType returns a boolean if a field has been set.
func (o *LetterEditable) HasMailType() bool {
	if o != nil && o.MailType != nil {
		return true
	}

	return false
}

// SetMailType gets a reference to the given MailType and assigns it to the MailType field.
func (o *LetterEditable) SetMailType(v MailType) {
	o.MailType = &v
}

// GetMergeVariables returns the MergeVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LetterEditable) GetMergeVariables() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.MergeVariables
}

// GetMergeVariablesOk returns a tuple with the MergeVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LetterEditable) GetMergeVariablesOk() (map[string]interface{}, bool) {
	if o == nil || o.MergeVariables == nil {
		return nil, false
	}
	return o.MergeVariables, true
}

// HasMergeVariables returns a boolean if a field has been set.
func (o *LetterEditable) HasMergeVariables() bool {
	if o != nil && o.MergeVariables != nil {
		return true
	}

	return false
}

// SetMergeVariables gets a reference to the given map[string]interface{} and assigns it to the MergeVariables field.
func (o *LetterEditable) SetMergeVariables(v map[string]interface{}) {
	o.MergeVariables = v
}

// GetSendDate returns the SendDate field value if set, zero value otherwise.
func (o *LetterEditable) GetSendDate() time.Time {
	if o == nil || o.SendDate == nil {
		var ret time.Time
		return ret
	}
	return *o.SendDate
}

// GetSendDateOk returns a tuple with the SendDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LetterEditable) GetSendDateOk() (*time.Time, bool) {
	if o == nil || o.SendDate == nil {
		return nil, false
	}
	return o.SendDate, true
}

// HasSendDate returns a boolean if a field has been set.
func (o *LetterEditable) HasSendDate() bool {
	if o != nil && o.SendDate != nil {
		return true
	}

	return false
}

// SetSendDate gets a reference to the given time.Time and assigns it to the SendDate field.
func (o *LetterEditable) SetSendDate(v time.Time) {
	o.SendDate = &v
}

// GetColor returns the Color field value
func (o *LetterEditable) GetColor() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *LetterEditable) GetColorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *LetterEditable) SetColor(v bool) {
	o.Color = v
}

// GetDoubleSided returns the DoubleSided field value if set, zero value otherwise.
func (o *LetterEditable) GetDoubleSided() bool {
	if o == nil || o.DoubleSided == nil {
		var ret bool
		return ret
	}
	return *o.DoubleSided
}

// GetDoubleSidedOk returns a tuple with the DoubleSided field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LetterEditable) GetDoubleSidedOk() (*bool, bool) {
	if o == nil || o.DoubleSided == nil {
		return nil, false
	}
	return o.DoubleSided, true
}

// HasDoubleSided returns a boolean if a field has been set.
func (o *LetterEditable) HasDoubleSided() bool {
	if o != nil && o.DoubleSided != nil {
		return true
	}

	return false
}

// SetDoubleSided gets a reference to the given bool and assigns it to the DoubleSided field.
func (o *LetterEditable) SetDoubleSided(v bool) {
	o.DoubleSided = &v
}

// GetAddressPlacement returns the AddressPlacement field value if set, zero value otherwise.
func (o *LetterEditable) GetAddressPlacement() string {
	if o == nil || o.AddressPlacement == nil {
		var ret string
		return ret
	}
	return *o.AddressPlacement
}

// GetAddressPlacementOk returns a tuple with the AddressPlacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LetterEditable) GetAddressPlacementOk() (*string, bool) {
	if o == nil || o.AddressPlacement == nil {
		return nil, false
	}
	return o.AddressPlacement, true
}

// HasAddressPlacement returns a boolean if a field has been set.
func (o *LetterEditable) HasAddressPlacement() bool {
	if o != nil && o.AddressPlacement != nil {
		return true
	}

	return false
}

// SetAddressPlacement gets a reference to the given string and assigns it to the AddressPlacement field.
func (o *LetterEditable) SetAddressPlacement(v string) {
	o.AddressPlacement = &v
}

// GetReturnEnvelope returns the ReturnEnvelope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LetterEditable) GetReturnEnvelope() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ReturnEnvelope
}

// GetReturnEnvelopeOk returns a tuple with the ReturnEnvelope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LetterEditable) GetReturnEnvelopeOk() (*interface{}, bool) {
	if o == nil || o.ReturnEnvelope == nil {
		return nil, false
	}
	return &o.ReturnEnvelope, true
}

// HasReturnEnvelope returns a boolean if a field has been set.
func (o *LetterEditable) HasReturnEnvelope() bool {
	if o != nil && o.ReturnEnvelope != nil {
		return true
	}

	return false
}

// SetReturnEnvelope gets a reference to the given interface{} and assigns it to the ReturnEnvelope field.
func (o *LetterEditable) SetReturnEnvelope(v interface{}) {
	o.ReturnEnvelope = v
}

// GetPerforatedPage returns the PerforatedPage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LetterEditable) GetPerforatedPage() int32 {
	if o == nil || o.PerforatedPage.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PerforatedPage.Get()
}

// GetPerforatedPageOk returns a tuple with the PerforatedPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LetterEditable) GetPerforatedPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PerforatedPage.Get(), o.PerforatedPage.IsSet()
}

// HasPerforatedPage returns a boolean if a field has been set.
func (o *LetterEditable) HasPerforatedPage() bool {
	if o != nil && o.PerforatedPage.IsSet() {
		return true
	}

	return false
}

// SetPerforatedPage gets a reference to the given NullableInt32 and assigns it to the PerforatedPage field.
func (o *LetterEditable) SetPerforatedPage(v int32) {
	o.PerforatedPage.Set(&v)
}
// SetPerforatedPageNil sets the value for PerforatedPage to be an explicit nil
func (o *LetterEditable) SetPerforatedPageNil() {
	o.PerforatedPage.Set(nil)
}

// UnsetPerforatedPage ensures that no value is present for PerforatedPage, not even an explicit nil
func (o *LetterEditable) UnsetPerforatedPage() {
	o.PerforatedPage.Unset()
}

// GetCustomEnvelope returns the CustomEnvelope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LetterEditable) GetCustomEnvelope() string {
	if o == nil || o.CustomEnvelope.Get() == nil {
		var ret string
		return ret
	}
	return *o.CustomEnvelope.Get()
}

// GetCustomEnvelopeOk returns a tuple with the CustomEnvelope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LetterEditable) GetCustomEnvelopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomEnvelope.Get(), o.CustomEnvelope.IsSet()
}

// HasCustomEnvelope returns a boolean if a field has been set.
func (o *LetterEditable) HasCustomEnvelope() bool {
	if o != nil && o.CustomEnvelope.IsSet() {
		return true
	}

	return false
}

// SetCustomEnvelope gets a reference to the given NullableString and assigns it to the CustomEnvelope field.
func (o *LetterEditable) SetCustomEnvelope(v string) {
	o.CustomEnvelope.Set(&v)
}
// SetCustomEnvelopeNil sets the value for CustomEnvelope to be an explicit nil
func (o *LetterEditable) SetCustomEnvelopeNil() {
	o.CustomEnvelope.Set(nil)
}

// UnsetCustomEnvelope ensures that no value is present for CustomEnvelope, not even an explicit nil
func (o *LetterEditable) UnsetCustomEnvelope() {
	o.CustomEnvelope.Unset()
}

// GetTo returns the To field value
func (o *LetterEditable) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *LetterEditable) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *LetterEditable) SetTo(v string) {
	o.To = v
}

// GetFrom returns the From field value
func (o *LetterEditable) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *LetterEditable) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *LetterEditable) SetFrom(v string) {
	o.From = v
}

// GetFile returns the File field value
func (o *LetterEditable) GetFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *LetterEditable) GetFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *LetterEditable) SetFile(v string) {
	o.File = v
}

// GetExtraService returns the ExtraService field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LetterEditable) GetExtraService() string {
	if o == nil || o.ExtraService.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExtraService.Get()
}

// GetExtraServiceOk returns a tuple with the ExtraService field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LetterEditable) GetExtraServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtraService.Get(), o.ExtraService.IsSet()
}

// HasExtraService returns a boolean if a field has been set.
func (o *LetterEditable) HasExtraService() bool {
	if o != nil && o.ExtraService.IsSet() {
		return true
	}

	return false
}

// SetExtraService gets a reference to the given NullableString and assigns it to the ExtraService field.
func (o *LetterEditable) SetExtraService(v string) {
	o.ExtraService.Set(&v)
}
// SetExtraServiceNil sets the value for ExtraService to be an explicit nil
func (o *LetterEditable) SetExtraServiceNil() {
	o.ExtraService.Set(nil)
}

// UnsetExtraService ensures that no value is present for ExtraService, not even an explicit nil
func (o *LetterEditable) UnsetExtraService() {
	o.ExtraService.Unset()
}

// GetCards returns the Cards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LetterEditable) GetCards() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Cards
}

// GetCardsOk returns a tuple with the Cards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LetterEditable) GetCardsOk() ([]string, bool) {
	if o == nil || o.Cards == nil {
		return nil, false
	}
	return o.Cards, true
}

// HasCards returns a boolean if a field has been set.
func (o *LetterEditable) HasCards() bool {
	if o != nil && o.Cards != nil {
		return true
	}

	return false
}

// SetCards gets a reference to the given []string and assigns it to the Cards field.
func (o *LetterEditable) SetCards(v []string) {
	o.Cards = v
}

// GetBillingGroupId returns the BillingGroupId field value if set, zero value otherwise.
func (o *LetterEditable) GetBillingGroupId() string {
	if o == nil || o.BillingGroupId == nil {
		var ret string
		return ret
	}
	return *o.BillingGroupId
}

// GetBillingGroupIdOk returns a tuple with the BillingGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LetterEditable) GetBillingGroupIdOk() (*string, bool) {
	if o == nil || o.BillingGroupId == nil {
		return nil, false
	}
	return o.BillingGroupId, true
}

// HasBillingGroupId returns a boolean if a field has been set.
func (o *LetterEditable) HasBillingGroupId() bool {
	if o != nil && o.BillingGroupId != nil {
		return true
	}

	return false
}

// SetBillingGroupId gets a reference to the given string and assigns it to the BillingGroupId field.
func (o *LetterEditable) SetBillingGroupId(v string) {
	o.BillingGroupId = &v
}

func (o LetterEditable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.MailType != nil {
		toSerialize["mail_type"] = o.MailType
	}
	if o.MergeVariables != nil {
		toSerialize["merge_variables"] = o.MergeVariables
	}
	if o.SendDate != nil {
		toSerialize["send_date"] = o.SendDate
	}
	if true {
		toSerialize["color"] = o.Color
	}
	if o.DoubleSided != nil {
		toSerialize["double_sided"] = o.DoubleSided
	}
	if o.AddressPlacement != nil {
		toSerialize["address_placement"] = o.AddressPlacement
	}
	if o.ReturnEnvelope != nil {
		toSerialize["return_envelope"] = o.ReturnEnvelope
	}
	if o.PerforatedPage.IsSet() {
		toSerialize["perforated_page"] = o.PerforatedPage.Get()
	}
	if o.CustomEnvelope.IsSet() {
		toSerialize["custom_envelope"] = o.CustomEnvelope.Get()
	}
	if true {
		toSerialize["to"] = o.To
	}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["file"] = o.File
	}
	if o.ExtraService.IsSet() {
		toSerialize["extra_service"] = o.ExtraService.Get()
	}
	if o.Cards != nil {
		toSerialize["cards"] = o.Cards
	}
	if o.BillingGroupId != nil {
		toSerialize["billing_group_id"] = o.BillingGroupId
	}
	return json.Marshal(toSerialize)
}

type NullableLetterEditable struct {
	value *LetterEditable
	isSet bool
}

func (v NullableLetterEditable) Get() *LetterEditable {
	return v.value
}

func (v *NullableLetterEditable) Set(val *LetterEditable) {
	v.value = val
	v.isSet = true
}

func (v NullableLetterEditable) IsSet() bool {
	return v.isSet
}

func (v *NullableLetterEditable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLetterEditable(val *LetterEditable) *NullableLetterEditable {
	return &NullableLetterEditable{value: val, isSet: true}
}

func (v NullableLetterEditable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLetterEditable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


