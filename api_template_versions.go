/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
	"strings"
	"reflect"
)


// TemplateVersionsApiService TemplateVersionsApi service
type TemplateVersionsApiService service

type ApiCreateTemplateVersionRequest struct {
	ctx context.Context
	ApiService *TemplateVersionsApiService
	tmplId string
	templateVersionWritable *TemplateVersionWritable
}

func (r ApiCreateTemplateVersionRequest) TemplateVersionWritable(templateVersionWritable TemplateVersionWritable) ApiCreateTemplateVersionRequest {
	r.templateVersionWritable = &templateVersionWritable
	return r
}

func (r ApiCreateTemplateVersionRequest) Execute() (*TemplateVersion, *http.Response, error) {
	return r.ApiService.CreateTemplateVersionExecute(r)
}

/*
CreateTemplateVersion create

Creates a new template version attached to the specified template.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tmplId The ID of the template the new version will be attached to
 @return ApiCreateTemplateVersionRequest
*/
func (a *TemplateVersionsApiService) CreateTemplateVersion(ctx context.Context, tmplId string) ApiCreateTemplateVersionRequest {
	return ApiCreateTemplateVersionRequest{
		ApiService: a,
		ctx: ctx,
		tmplId: tmplId,
	}
}

// Execute executes the request
//  @return TemplateVersion
func (a *TemplateVersionsApiService) CreateTemplateVersionExecute(r ApiCreateTemplateVersionRequest) (*TemplateVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TemplateVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateVersionsApiService.CreateTemplateVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/templates/{tmpl_id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"tmpl_id"+"}", url.PathEscape(parameterToString(r.tmplId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.templateVersionWritable == nil {
		return localVarReturnValue, nil, reportError("templateVersionWritable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.templateVersionWritable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v LobError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTemplateVersionDeleteRequest struct {
	ctx context.Context
	ApiService *TemplateVersionsApiService
	tmplId string
	vrsnId string
}

func (r ApiTemplateVersionDeleteRequest) Execute() (*TemplateVersionDeletion, *http.Response, error) {
	return r.ApiService.TemplateVersionDeleteExecute(r)
}

/*
TemplateVersionDelete delete

Permanently deletes a template version. A template's `published_version` can not be deleted.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tmplId The ID of the template to which the version belongs.
 @param vrsnId id of the template_version
 @return ApiTemplateVersionDeleteRequest
*/
func (a *TemplateVersionsApiService) TemplateVersionDelete(ctx context.Context, tmplId string, vrsnId string) ApiTemplateVersionDeleteRequest {
	return ApiTemplateVersionDeleteRequest{
		ApiService: a,
		ctx: ctx,
		tmplId: tmplId,
		vrsnId: vrsnId,
	}
}

// Execute executes the request
//  @return TemplateVersionDeletion
func (a *TemplateVersionsApiService) TemplateVersionDeleteExecute(r ApiTemplateVersionDeleteRequest) (*TemplateVersionDeletion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TemplateVersionDeletion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateVersionsApiService.TemplateVersionDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/templates/{tmpl_id}/versions/{vrsn_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tmpl_id"+"}", url.PathEscape(parameterToString(r.tmplId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vrsn_id"+"}", url.PathEscape(parameterToString(r.vrsnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v LobError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTemplateVersionRetrieveRequest struct {
	ctx context.Context
	ApiService *TemplateVersionsApiService
	tmplId string
	vrsnId string
}

func (r ApiTemplateVersionRetrieveRequest) Execute() (*TemplateVersion, *http.Response, error) {
	return r.ApiService.TemplateVersionRetrieveExecute(r)
}

/*
TemplateVersionRetrieve get

Retrieves the template version with the given template and version ids.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tmplId The ID of the template to which the version belongs.
 @param vrsnId id of the template_version
 @return ApiTemplateVersionRetrieveRequest
*/
func (a *TemplateVersionsApiService) TemplateVersionRetrieve(ctx context.Context, tmplId string, vrsnId string) ApiTemplateVersionRetrieveRequest {
	return ApiTemplateVersionRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		tmplId: tmplId,
		vrsnId: vrsnId,
	}
}

// Execute executes the request
//  @return TemplateVersion
func (a *TemplateVersionsApiService) TemplateVersionRetrieveExecute(r ApiTemplateVersionRetrieveRequest) (*TemplateVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TemplateVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateVersionsApiService.TemplateVersionRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/templates/{tmpl_id}/versions/{vrsn_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tmpl_id"+"}", url.PathEscape(parameterToString(r.tmplId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vrsn_id"+"}", url.PathEscape(parameterToString(r.vrsnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v LobError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTemplateVersionUpdateRequest struct {
	ctx context.Context
	ApiService *TemplateVersionsApiService
	tmplId string
	vrsnId string
	templateVersionUpdatable *TemplateVersionUpdatable
}

func (r ApiTemplateVersionUpdateRequest) TemplateVersionUpdatable(templateVersionUpdatable TemplateVersionUpdatable) ApiTemplateVersionUpdateRequest {
	r.templateVersionUpdatable = &templateVersionUpdatable
	return r
}

func (r ApiTemplateVersionUpdateRequest) Execute() (*TemplateVersion, *http.Response, error) {
	return r.ApiService.TemplateVersionUpdateExecute(r)
}

/*
TemplateVersionUpdate update

Updates the template version with the given template and version ids.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tmplId The ID of the template to which the version belongs.
 @param vrsnId id of the template_version
 @return ApiTemplateVersionUpdateRequest
*/
func (a *TemplateVersionsApiService) TemplateVersionUpdate(ctx context.Context, tmplId string, vrsnId string) ApiTemplateVersionUpdateRequest {
	return ApiTemplateVersionUpdateRequest{
		ApiService: a,
		ctx: ctx,
		tmplId: tmplId,
		vrsnId: vrsnId,
	}
}

// Execute executes the request
//  @return TemplateVersion
func (a *TemplateVersionsApiService) TemplateVersionUpdateExecute(r ApiTemplateVersionUpdateRequest) (*TemplateVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TemplateVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateVersionsApiService.TemplateVersionUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/templates/{tmpl_id}/versions/{vrsn_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tmpl_id"+"}", url.PathEscape(parameterToString(r.tmplId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vrsn_id"+"}", url.PathEscape(parameterToString(r.vrsnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.templateVersionUpdatable == nil {
		return localVarReturnValue, nil, reportError("templateVersionUpdatable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.templateVersionUpdatable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v LobError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTemplateVersionsListRequest struct {
	ctx context.Context
	ApiService *TemplateVersionsApiService
	tmplId string
	limit *int32
	before *string
	after *string
	include *[]string
	dateCreated *map[string]time.Time
}

// How many results to return.
func (r ApiTemplateVersionsListRequest) Limit(limit int32) ApiTemplateVersionsListRequest {
	r.limit = &limit
	return r
}

// A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response. 
func (r ApiTemplateVersionsListRequest) Before(before string) ApiTemplateVersionsListRequest {
	r.before = &before
	return r
}

// A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response. 
func (r ApiTemplateVersionsListRequest) After(after string) ApiTemplateVersionsListRequest {
	r.after = &after
	return r
}

// Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;. 
func (r ApiTemplateVersionsListRequest) Include(include []string) ApiTemplateVersionsListRequest {
	r.include = &include
	return r
}

// Filter by date created.
func (r ApiTemplateVersionsListRequest) DateCreated(dateCreated map[string]time.Time) ApiTemplateVersionsListRequest {
	r.dateCreated = &dateCreated
	return r
}

func (r ApiTemplateVersionsListRequest) Execute() (*TemplateVersionList, *http.Response, error) {
	return r.ApiService.TemplateVersionsListExecute(r)
}

/*
TemplateVersionsList list

Returns a list of template versions for the given template ID. The template versions are sorted by creation date, with the most recently created appearing first.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tmplId The ID of the template associated with the retrieved versions
 @return ApiTemplateVersionsListRequest
*/
func (a *TemplateVersionsApiService) TemplateVersionsList(ctx context.Context, tmplId string) ApiTemplateVersionsListRequest {
	return ApiTemplateVersionsListRequest{
		ApiService: a,
		ctx: ctx,
		tmplId: tmplId,
	}
}

// Execute executes the request
//  @return TemplateVersionList
func (a *TemplateVersionsApiService) TemplateVersionsListExecute(r ApiTemplateVersionsListRequest) (*TemplateVersionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TemplateVersionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateVersionsApiService.TemplateVersionsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/templates/{tmpl_id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"tmpl_id"+"}", url.PathEscape(parameterToString(r.tmplId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.before != nil {
		localVarQueryParams.Add("before", parameterToString(*r.before, ""))
	}
	if r.after != nil {
		localVarQueryParams.Add("after", parameterToString(*r.after, ""))
	}
	if r.include != nil {
		t := *r.include
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("include", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("include", parameterToString(t, "multi"))
		}
	}
	if r.dateCreated != nil {
		localVarQueryParams.Add("date_created", parameterToString(*r.dateCreated, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v LobError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
