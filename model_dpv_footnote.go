/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	"fmt"
)

// DpvFootnote the model 'DpvFootnote'
type DpvFootnote string

// List of dpv_footnote
const (
	DPVFOOTNOTE_AA DpvFootnote = "AA"
	DPVFOOTNOTE_A1 DpvFootnote = "A1"
	DPVFOOTNOTE_BB DpvFootnote = "BB"
	DPVFOOTNOTE_CC DpvFootnote = "CC"
	DPVFOOTNOTE_N1 DpvFootnote = "N1"
	DPVFOOTNOTE_F1 DpvFootnote = "F1"
	DPVFOOTNOTE_G1 DpvFootnote = "G1"
	DPVFOOTNOTE_U1 DpvFootnote = "U1"
	DPVFOOTNOTE_M1 DpvFootnote = "M1"
	DPVFOOTNOTE_M3 DpvFootnote = "M3"
	DPVFOOTNOTE_P1 DpvFootnote = "P1"
	DPVFOOTNOTE_P3 DpvFootnote = "P3"
	DPVFOOTNOTE_R1 DpvFootnote = "R1"
	DPVFOOTNOTE_R7 DpvFootnote = "R7"
	DPVFOOTNOTE_RR DpvFootnote = "RR"
)

// All allowed values of DpvFootnote enum
var AllowedDpvFootnoteEnumValues = []DpvFootnote{
	"AA",
	"A1",
	"BB",
	"CC",
	"N1",
	"F1",
	"G1",
	"U1",
	"M1",
	"M3",
	"P1",
	"P3",
	"R1",
	"R7",
	"RR",
}

func (v *DpvFootnote) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DpvFootnote(value)
	for _, existing := range AllowedDpvFootnoteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DpvFootnote", value)
}

// NewDpvFootnoteFromValue returns a pointer to a valid DpvFootnote
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDpvFootnoteFromValue(v string) (*DpvFootnote, error) {
	ev := DpvFootnote(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DpvFootnote: valid values are %v", v, AllowedDpvFootnoteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DpvFootnote) IsValid() bool {
	for _, existing := range AllowedDpvFootnoteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dpv_footnote value
func (v DpvFootnote) Ptr() *DpvFootnote {
	return &v
}

type NullableDpvFootnote struct {
	value *DpvFootnote
	isSet bool
}

func (v NullableDpvFootnote) Get() *DpvFootnote {
	return v.value
}

func (v *NullableDpvFootnote) Set(val *DpvFootnote) {
	v.value = val
	v.isSet = true
}

func (v NullableDpvFootnote) IsSet() bool {
	return v.isSet
}

func (v *NullableDpvFootnote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpvFootnote(val *DpvFootnote) *NullableDpvFootnote {
	return &NullableDpvFootnote{value: val, isSet: true}
}

func (v NullableDpvFootnote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpvFootnote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

