/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
	"time"
)

// Upload struct for Upload
type Upload struct {
	// Unique identifier prefixed with `upl_`.
	Id string `json:"id"`
	// Account ID that made the request
	AccountId string `json:"accountId"`
	// The environment in which the mailpieces were created. Today, will only be `live`.
	Mode string `json:"mode"`
	// Url where your campaign mailpiece failures can be retrieved
	FailuresUrl *string `json:"failuresUrl,omitempty"`
	// Filename of the upload
	OriginalFilename *string `json:"originalFilename,omitempty"`
	State UploadState `json:"state"`
	// Total number of recipients for the campaign
	TotalMailpieces int32 `json:"totalMailpieces"`
	// Number of mailpieces that failed to create
	FailedMailpieces int32 `json:"failedMailpieces"`
	// Number of mailpieces that were successfully created
	ValidatedMailpieces int32 `json:"validatedMailpieces"`
	// Number of bytes processed in your CSV
	BytesProcessed int32 `json:"bytesProcessed"`
	// A timestamp in ISO 8601 format of the date the upload was created
	DateCreated time.Time `json:"dateCreated"`
	// A timestamp in ISO 8601 format of the date the upload was last modified
	DateModified time.Time `json:"dateModified"`
	RequiredAddressColumnMapping RequiredAddressColumnMapping `json:"requiredAddressColumnMapping"`
	OptionalAddressColumnMapping OptionalAddressColumnMapping `json:"optionalAddressColumnMapping"`
	Metadata UploadsMetadata `json:"metadata"`
	// The mapping of column headers in your file to the merge variables present in your creative. See our <a href=\"https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#step-3-map-merge-variable-data-if-applicable-7\" target=\"_blank\">Campaign Audience Guide</a> for additional details. <br />If a merge variable has the same \"name\" as a \"key\" in the `requiredAddressColumnMapping` or `optionalAddressColumnMapping` objects, then they **CANNOT** have a different value in this object. If a different value is provided, then when the campaign is processing it will get overwritten with the mapped value present in the `requiredAddressColumnMapping` or `optionalAddressColumnMapping` objects.
	MergeVariableColumnMapping map[string]interface{} `json:"mergeVariableColumnMapping"`
}

// NewUpload instantiates a new Upload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpload(id string, accountId string, mode string, state UploadState, totalMailpieces int32, failedMailpieces int32, validatedMailpieces int32, bytesProcessed int32, dateCreated time.Time, dateModified time.Time, requiredAddressColumnMapping RequiredAddressColumnMapping, optionalAddressColumnMapping OptionalAddressColumnMapping, metadata UploadsMetadata, mergeVariableColumnMapping map[string]interface{}) *Upload {
	this := Upload{}
	this.Id = id
	this.AccountId = accountId
	this.Mode = mode
	this.State = state
	this.TotalMailpieces = totalMailpieces
	this.FailedMailpieces = failedMailpieces
	this.ValidatedMailpieces = validatedMailpieces
	this.BytesProcessed = bytesProcessed
	this.DateCreated = dateCreated
	this.DateModified = dateModified
	this.RequiredAddressColumnMapping = requiredAddressColumnMapping
	this.OptionalAddressColumnMapping = optionalAddressColumnMapping
	this.Metadata = metadata
	this.MergeVariableColumnMapping = mergeVariableColumnMapping
	return &this
}

// NewUploadWithDefaults instantiates a new Upload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadWithDefaults() *Upload {
	this := Upload{}
	var state UploadState = UPLOADSTATE_DRAFT
	this.State = state
	return &this
}

// GetId returns the Id field value
func (o *Upload) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Upload) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Upload) SetId(v string) {
	o.Id = v
}

// GetAccountId returns the AccountId field value
func (o *Upload) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Upload) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Upload) SetAccountId(v string) {
	o.AccountId = v
}

// GetMode returns the Mode field value
func (o *Upload) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *Upload) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *Upload) SetMode(v string) {
	o.Mode = v
}

// GetFailuresUrl returns the FailuresUrl field value if set, zero value otherwise.
func (o *Upload) GetFailuresUrl() string {
	if o == nil || o.FailuresUrl == nil {
		var ret string
		return ret
	}
	return *o.FailuresUrl
}

// GetFailuresUrlOk returns a tuple with the FailuresUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetFailuresUrlOk() (*string, bool) {
	if o == nil || o.FailuresUrl == nil {
		return nil, false
	}
	return o.FailuresUrl, true
}

// HasFailuresUrl returns a boolean if a field has been set.
func (o *Upload) HasFailuresUrl() bool {
	if o != nil && o.FailuresUrl != nil {
		return true
	}

	return false
}

// SetFailuresUrl gets a reference to the given string and assigns it to the FailuresUrl field.
func (o *Upload) SetFailuresUrl(v string) {
	o.FailuresUrl = &v
}

// GetOriginalFilename returns the OriginalFilename field value if set, zero value otherwise.
func (o *Upload) GetOriginalFilename() string {
	if o == nil || o.OriginalFilename == nil {
		var ret string
		return ret
	}
	return *o.OriginalFilename
}

// GetOriginalFilenameOk returns a tuple with the OriginalFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetOriginalFilenameOk() (*string, bool) {
	if o == nil || o.OriginalFilename == nil {
		return nil, false
	}
	return o.OriginalFilename, true
}

// HasOriginalFilename returns a boolean if a field has been set.
func (o *Upload) HasOriginalFilename() bool {
	if o != nil && o.OriginalFilename != nil {
		return true
	}

	return false
}

// SetOriginalFilename gets a reference to the given string and assigns it to the OriginalFilename field.
func (o *Upload) SetOriginalFilename(v string) {
	o.OriginalFilename = &v
}

// GetState returns the State field value
func (o *Upload) GetState() UploadState {
	if o == nil {
		var ret UploadState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Upload) GetStateOk() (*UploadState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Upload) SetState(v UploadState) {
	o.State = v
}

// GetTotalMailpieces returns the TotalMailpieces field value
func (o *Upload) GetTotalMailpieces() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalMailpieces
}

// GetTotalMailpiecesOk returns a tuple with the TotalMailpieces field value
// and a boolean to check if the value has been set.
func (o *Upload) GetTotalMailpiecesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalMailpieces, true
}

// SetTotalMailpieces sets field value
func (o *Upload) SetTotalMailpieces(v int32) {
	o.TotalMailpieces = v
}

// GetFailedMailpieces returns the FailedMailpieces field value
func (o *Upload) GetFailedMailpieces() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FailedMailpieces
}

// GetFailedMailpiecesOk returns a tuple with the FailedMailpieces field value
// and a boolean to check if the value has been set.
func (o *Upload) GetFailedMailpiecesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedMailpieces, true
}

// SetFailedMailpieces sets field value
func (o *Upload) SetFailedMailpieces(v int32) {
	o.FailedMailpieces = v
}

// GetValidatedMailpieces returns the ValidatedMailpieces field value
func (o *Upload) GetValidatedMailpieces() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ValidatedMailpieces
}

// GetValidatedMailpiecesOk returns a tuple with the ValidatedMailpieces field value
// and a boolean to check if the value has been set.
func (o *Upload) GetValidatedMailpiecesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatedMailpieces, true
}

// SetValidatedMailpieces sets field value
func (o *Upload) SetValidatedMailpieces(v int32) {
	o.ValidatedMailpieces = v
}

// GetBytesProcessed returns the BytesProcessed field value
func (o *Upload) GetBytesProcessed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BytesProcessed
}

// GetBytesProcessedOk returns a tuple with the BytesProcessed field value
// and a boolean to check if the value has been set.
func (o *Upload) GetBytesProcessedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BytesProcessed, true
}

// SetBytesProcessed sets field value
func (o *Upload) SetBytesProcessed(v int32) {
	o.BytesProcessed = v
}

// GetDateCreated returns the DateCreated field value
func (o *Upload) GetDateCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value
// and a boolean to check if the value has been set.
func (o *Upload) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateCreated, true
}

// SetDateCreated sets field value
func (o *Upload) SetDateCreated(v time.Time) {
	o.DateCreated = v
}

// GetDateModified returns the DateModified field value
func (o *Upload) GetDateModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value
// and a boolean to check if the value has been set.
func (o *Upload) GetDateModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateModified, true
}

// SetDateModified sets field value
func (o *Upload) SetDateModified(v time.Time) {
	o.DateModified = v
}

// GetRequiredAddressColumnMapping returns the RequiredAddressColumnMapping field value
func (o *Upload) GetRequiredAddressColumnMapping() RequiredAddressColumnMapping {
	if o == nil {
		var ret RequiredAddressColumnMapping
		return ret
	}

	return o.RequiredAddressColumnMapping
}

// GetRequiredAddressColumnMappingOk returns a tuple with the RequiredAddressColumnMapping field value
// and a boolean to check if the value has been set.
func (o *Upload) GetRequiredAddressColumnMappingOk() (*RequiredAddressColumnMapping, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequiredAddressColumnMapping, true
}

// SetRequiredAddressColumnMapping sets field value
func (o *Upload) SetRequiredAddressColumnMapping(v RequiredAddressColumnMapping) {
	o.RequiredAddressColumnMapping = v
}

// GetOptionalAddressColumnMapping returns the OptionalAddressColumnMapping field value
func (o *Upload) GetOptionalAddressColumnMapping() OptionalAddressColumnMapping {
	if o == nil {
		var ret OptionalAddressColumnMapping
		return ret
	}

	return o.OptionalAddressColumnMapping
}

// GetOptionalAddressColumnMappingOk returns a tuple with the OptionalAddressColumnMapping field value
// and a boolean to check if the value has been set.
func (o *Upload) GetOptionalAddressColumnMappingOk() (*OptionalAddressColumnMapping, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OptionalAddressColumnMapping, true
}

// SetOptionalAddressColumnMapping sets field value
func (o *Upload) SetOptionalAddressColumnMapping(v OptionalAddressColumnMapping) {
	o.OptionalAddressColumnMapping = v
}

// GetMetadata returns the Metadata field value
func (o *Upload) GetMetadata() UploadsMetadata {
	if o == nil {
		var ret UploadsMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Upload) GetMetadataOk() (*UploadsMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Upload) SetMetadata(v UploadsMetadata) {
	o.Metadata = v
}

// GetMergeVariableColumnMapping returns the MergeVariableColumnMapping field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *Upload) GetMergeVariableColumnMapping() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.MergeVariableColumnMapping
}

// GetMergeVariableColumnMappingOk returns a tuple with the MergeVariableColumnMapping field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Upload) GetMergeVariableColumnMappingOk() (map[string]interface{}, bool) {
	if o == nil || o.MergeVariableColumnMapping == nil {
		return nil, false
	}
	return o.MergeVariableColumnMapping, true
}

// SetMergeVariableColumnMapping sets field value
func (o *Upload) SetMergeVariableColumnMapping(v map[string]interface{}) {
	o.MergeVariableColumnMapping = v
}

func (o Upload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["mode"] = o.Mode
	}
	if o.FailuresUrl != nil {
		toSerialize["failuresUrl"] = o.FailuresUrl
	}
	if o.OriginalFilename != nil {
		toSerialize["originalFilename"] = o.OriginalFilename
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["totalMailpieces"] = o.TotalMailpieces
	}
	if true {
		toSerialize["failedMailpieces"] = o.FailedMailpieces
	}
	if true {
		toSerialize["validatedMailpieces"] = o.ValidatedMailpieces
	}
	if true {
		toSerialize["bytesProcessed"] = o.BytesProcessed
	}
	if true {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if true {
		toSerialize["dateModified"] = o.DateModified
	}
	if true {
		toSerialize["requiredAddressColumnMapping"] = o.RequiredAddressColumnMapping
	}
	if true {
		toSerialize["optionalAddressColumnMapping"] = o.OptionalAddressColumnMapping
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if o.MergeVariableColumnMapping != nil {
		toSerialize["mergeVariableColumnMapping"] = o.MergeVariableColumnMapping
	}
	return json.Marshal(toSerialize)
}

type NullableUpload struct {
	value *Upload
	isSet bool
}

func (v NullableUpload) Get() *Upload {
	return v.value
}

func (v *NullableUpload) Set(val *Upload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpload(val *Upload) *NullableUpload {
	return &NullableUpload{value: val, isSet: true}
}

func (v NullableUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


