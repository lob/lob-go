/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
)

// UploadUpdatable struct for UploadUpdatable
type UploadUpdatable struct {
	// The mapping of column headers in your file to Lob-required fields for the resource created. See our <a href=\"https://help.lob.com/best-practices/campaign-audience-guide\" target=\"_blank\">Campaign Audience Guide</a> for additional details.
	ColumnMapping map[string]interface{} `json:"columnMapping,omitempty"`
	State *UploadState `json:"state,omitempty"`
	// Original filename provided when the upload is created.
	OriginalFilename *string `json:"originalFilename,omitempty"`
	// Properties in `columnMapping` will be appended to the existing `columnMapping` object if set to `false`. If set to `true`, the existing `columnMapping` object will be overwritten with the data supplied in `columnMapping` property. 
	OverwriteColumnMapping *bool `json:"overwriteColumnMapping,omitempty"`
}

// NewUploadUpdatable instantiates a new UploadUpdatable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadUpdatable() *UploadUpdatable {
	this := UploadUpdatable{}
	var state UploadState = UPLOADSTATE_DRAFT
	this.State = &state
	return &this
}

// NewUploadUpdatableWithDefaults instantiates a new UploadUpdatable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadUpdatableWithDefaults() *UploadUpdatable {
	this := UploadUpdatable{}
	var state UploadState = UPLOADSTATE_DRAFT
	this.State = &state
	return &this
}

// GetColumnMapping returns the ColumnMapping field value if set, zero value otherwise.
func (o *UploadUpdatable) GetColumnMapping() map[string]interface{} {
	if o == nil || o.ColumnMapping == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ColumnMapping
}

// GetColumnMappingOk returns a tuple with the ColumnMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadUpdatable) GetColumnMappingOk() (map[string]interface{}, bool) {
	if o == nil || o.ColumnMapping == nil {
		return nil, false
	}
	return o.ColumnMapping, true
}

// HasColumnMapping returns a boolean if a field has been set.
func (o *UploadUpdatable) HasColumnMapping() bool {
	if o != nil && o.ColumnMapping != nil {
		return true
	}

	return false
}

// SetColumnMapping gets a reference to the given map[string]interface{} and assigns it to the ColumnMapping field.
func (o *UploadUpdatable) SetColumnMapping(v map[string]interface{}) {
	o.ColumnMapping = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *UploadUpdatable) GetState() UploadState {
	if o == nil || o.State == nil {
		var ret UploadState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadUpdatable) GetStateOk() (*UploadState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *UploadUpdatable) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given UploadState and assigns it to the State field.
func (o *UploadUpdatable) SetState(v UploadState) {
	o.State = &v
}

// GetOriginalFilename returns the OriginalFilename field value if set, zero value otherwise.
func (o *UploadUpdatable) GetOriginalFilename() string {
	if o == nil || o.OriginalFilename == nil {
		var ret string
		return ret
	}
	return *o.OriginalFilename
}

// GetOriginalFilenameOk returns a tuple with the OriginalFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadUpdatable) GetOriginalFilenameOk() (*string, bool) {
	if o == nil || o.OriginalFilename == nil {
		return nil, false
	}
	return o.OriginalFilename, true
}

// HasOriginalFilename returns a boolean if a field has been set.
func (o *UploadUpdatable) HasOriginalFilename() bool {
	if o != nil && o.OriginalFilename != nil {
		return true
	}

	return false
}

// SetOriginalFilename gets a reference to the given string and assigns it to the OriginalFilename field.
func (o *UploadUpdatable) SetOriginalFilename(v string) {
	o.OriginalFilename = &v
}

// GetOverwriteColumnMapping returns the OverwriteColumnMapping field value if set, zero value otherwise.
func (o *UploadUpdatable) GetOverwriteColumnMapping() bool {
	if o == nil || o.OverwriteColumnMapping == nil {
		var ret bool
		return ret
	}
	return *o.OverwriteColumnMapping
}

// GetOverwriteColumnMappingOk returns a tuple with the OverwriteColumnMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadUpdatable) GetOverwriteColumnMappingOk() (*bool, bool) {
	if o == nil || o.OverwriteColumnMapping == nil {
		return nil, false
	}
	return o.OverwriteColumnMapping, true
}

// HasOverwriteColumnMapping returns a boolean if a field has been set.
func (o *UploadUpdatable) HasOverwriteColumnMapping() bool {
	if o != nil && o.OverwriteColumnMapping != nil {
		return true
	}

	return false
}

// SetOverwriteColumnMapping gets a reference to the given bool and assigns it to the OverwriteColumnMapping field.
func (o *UploadUpdatable) SetOverwriteColumnMapping(v bool) {
	o.OverwriteColumnMapping = &v
}

func (o UploadUpdatable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ColumnMapping != nil {
		toSerialize["columnMapping"] = o.ColumnMapping
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.OriginalFilename != nil {
		toSerialize["originalFilename"] = o.OriginalFilename
	}
	if o.OverwriteColumnMapping != nil {
		toSerialize["overwriteColumnMapping"] = o.OverwriteColumnMapping
	}
	return json.Marshal(toSerialize)
}

type NullableUploadUpdatable struct {
	value *UploadUpdatable
	isSet bool
}

func (v NullableUploadUpdatable) Get() *UploadUpdatable {
	return v.value
}

func (v *NullableUploadUpdatable) Set(val *UploadUpdatable) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadUpdatable) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadUpdatable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadUpdatable(val *UploadUpdatable) *NullableUploadUpdatable {
	return &NullableUploadUpdatable{value: val, isSet: true}
}

func (v NullableUploadUpdatable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadUpdatable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


