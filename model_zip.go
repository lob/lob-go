/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
)

// Zip struct for Zip
type Zip struct {
	// A 5-digit ZIP code.
	ZipCode *string `json:"zip_code,omitempty"`
	// Unique identifier prefixed with `us_zip_`.
	Id string `json:"id"`
	// An array of city objects containing valid cities for the `zip_code`. Multiple cities will be returned if more than one city is associated with the input ZIP code. 
	Cities []ZipLookupCity `json:"cities"`
	ZipCodeType ZipCodeType `json:"zip_code_type"`
	Object string `json:"object"`
}

// NewZip instantiates a new Zip object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZip(id string, cities []ZipLookupCity, zipCodeType ZipCodeType, object string) *Zip {
	this := Zip{}
	this.Id = id
	this.Cities = cities
	this.ZipCodeType = zipCodeType
	this.Object = object
	return &this
}

// NewZipWithDefaults instantiates a new Zip object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZipWithDefaults() *Zip {
	this := Zip{}
	var object string = "us_zip_lookup"
	this.Object = object
	return &this
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise.
func (o *Zip) GetZipCode() string {
	if o == nil || o.ZipCode == nil {
		var ret string
		return ret
	}
	return *o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zip) GetZipCodeOk() (*string, bool) {
	if o == nil || o.ZipCode == nil {
		return nil, false
	}
	return o.ZipCode, true
}

// HasZipCode returns a boolean if a field has been set.
func (o *Zip) HasZipCode() bool {
	if o != nil && o.ZipCode != nil {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given string and assigns it to the ZipCode field.
func (o *Zip) SetZipCode(v string) {
	o.ZipCode = &v
}

// GetId returns the Id field value
func (o *Zip) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Zip) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Zip) SetId(v string) {
	o.Id = v
}

// GetCities returns the Cities field value
func (o *Zip) GetCities() []ZipLookupCity {
	if o == nil {
		var ret []ZipLookupCity
		return ret
	}

	return o.Cities
}

// GetCitiesOk returns a tuple with the Cities field value
// and a boolean to check if the value has been set.
func (o *Zip) GetCitiesOk() ([]ZipLookupCity, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cities, true
}

// SetCities sets field value
func (o *Zip) SetCities(v []ZipLookupCity) {
	o.Cities = v
}

// GetZipCodeType returns the ZipCodeType field value
func (o *Zip) GetZipCodeType() ZipCodeType {
	if o == nil {
		var ret ZipCodeType
		return ret
	}

	return o.ZipCodeType
}

// GetZipCodeTypeOk returns a tuple with the ZipCodeType field value
// and a boolean to check if the value has been set.
func (o *Zip) GetZipCodeTypeOk() (*ZipCodeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZipCodeType, true
}

// SetZipCodeType sets field value
func (o *Zip) SetZipCodeType(v ZipCodeType) {
	o.ZipCodeType = v
}

// GetObject returns the Object field value
func (o *Zip) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Zip) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Zip) SetObject(v string) {
	o.Object = v
}

func (o Zip) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ZipCode != nil {
		toSerialize["zip_code"] = o.ZipCode
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["cities"] = o.Cities
	}
	if true {
		toSerialize["zip_code_type"] = o.ZipCodeType
	}
	if true {
		toSerialize["object"] = o.Object
	}
	return json.Marshal(toSerialize)
}

type NullableZip struct {
	value *Zip
	isSet bool
}

func (v NullableZip) Get() *Zip {
	return v.value
}

func (v *NullableZip) Set(val *Zip) {
	v.value = val
	v.isSet = true
}

func (v NullableZip) IsSet() bool {
	return v.isSet
}

func (v *NullableZip) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZip(val *Zip) *NullableZip {
	return &NullableZip{value: val, isSet: true}
}

func (v NullableZip) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZip) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


