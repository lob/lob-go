/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
)

// BuckslipEditable struct for BuckslipEditable
type BuckslipEditable struct {
	// A PDF template for the front of the buckslip
	Front string `json:"front"`
	// A PDF template for the back of the buckslip
	Back *string `json:"back,omitempty"`
	// Description of the buckslip.
	Description NullableString `json:"description,omitempty"`
	// The size of the buckslip
	Size *string `json:"size,omitempty"`
}

// NewBuckslipEditable instantiates a new BuckslipEditable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuckslipEditable(front string) *BuckslipEditable {
	this := BuckslipEditable{}
	this.Front = front
	var size string = "8.75x3.75"
	this.Size = &size
	return &this
}

// NewBuckslipEditableWithDefaults instantiates a new BuckslipEditable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuckslipEditableWithDefaults() *BuckslipEditable {
	this := BuckslipEditable{}
	var size string = "8.75x3.75"
	this.Size = &size
	return &this
}

// GetFront returns the Front field value
func (o *BuckslipEditable) GetFront() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Front
}

// GetFrontOk returns a tuple with the Front field value
// and a boolean to check if the value has been set.
func (o *BuckslipEditable) GetFrontOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Front, true
}

// SetFront sets field value
func (o *BuckslipEditable) SetFront(v string) {
	o.Front = v
}

// GetBack returns the Back field value if set, zero value otherwise.
func (o *BuckslipEditable) GetBack() string {
	if o == nil || o.Back == nil {
		var ret string
		return ret
	}
	return *o.Back
}

// GetBackOk returns a tuple with the Back field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuckslipEditable) GetBackOk() (*string, bool) {
	if o == nil || o.Back == nil {
		return nil, false
	}
	return o.Back, true
}

// HasBack returns a boolean if a field has been set.
func (o *BuckslipEditable) HasBack() bool {
	if o != nil && o.Back != nil {
		return true
	}

	return false
}

// SetBack gets a reference to the given string and assigns it to the Back field.
func (o *BuckslipEditable) SetBack(v string) {
	o.Back = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BuckslipEditable) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BuckslipEditable) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *BuckslipEditable) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *BuckslipEditable) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *BuckslipEditable) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *BuckslipEditable) UnsetDescription() {
	o.Description.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *BuckslipEditable) GetSize() string {
	if o == nil || o.Size == nil {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuckslipEditable) GetSizeOk() (*string, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *BuckslipEditable) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *BuckslipEditable) SetSize(v string) {
	o.Size = &v
}

func (o BuckslipEditable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["front"] = o.Front
	}
	if o.Back != nil {
		toSerialize["back"] = o.Back
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableBuckslipEditable struct {
	value *BuckslipEditable
	isSet bool
}

func (v NullableBuckslipEditable) Get() *BuckslipEditable {
	return v.value
}

func (v *NullableBuckslipEditable) Set(val *BuckslipEditable) {
	v.value = val
	v.isSet = true
}

func (v NullableBuckslipEditable) IsSet() bool {
	return v.isSet
}

func (v *NullableBuckslipEditable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuckslipEditable(val *BuckslipEditable) *NullableBuckslipEditable {
	return &NullableBuckslipEditable{value: val, isSet: true}
}

func (v NullableBuckslipEditable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuckslipEditable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


