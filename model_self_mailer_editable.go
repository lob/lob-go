/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
	"time"
)

// SelfMailerEditable struct for SelfMailerEditable
type SelfMailerEditable struct {
	// Must either be an address ID or an inline object with correct address parameters.
	To string `json:"to"`
	// Must either be an address ID or an inline object with correct address parameters.
	From *string `json:"from,omitempty"`
	Size *SelfMailerSize `json:"size,omitempty"`
	// An internal description that identifies this resource. Must be no longer than 255 characters. 
	Description NullableString `json:"description,omitempty"`
	// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters `\"` and `\\`. i.e. '{\"customer_id\" : \"NEWYORK2015\"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
	Metadata *map[string]string `json:"metadata,omitempty"`
	MailType *MailType `json:"mail_type,omitempty"`
	// You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: `{{variable_name}}`, pass in `{\"variable_name\": \"Harry\"}` to render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: `!`, `\"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `<`, `=`, `>`, `@`, `[`, `\\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string.
	MergeVariables map[string]interface{} `json:"merge_variables,omitempty"`
	// A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the `send_date` has passed, the mailpiece can be canceled. If a date in the format `2017-11-01` is passed, it will evaluate to midnight UTC of that date (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a time zone will be converted to UTC.
	SendDate *time.Time `json:"send_date,omitempty"`
	// The artwork to use as the inside of your self mailer. 
	Inside string `json:"inside"`
	// The artwork to use as the outside of your self mailer. 
	Outside string `json:"outside"`
	// An optional string with the billing group ID to tag your usage with. Is used for billing purposes. Requires special activation to use. See [Billing Group API](https://lob.github.io/lob-openapi/#tag/Billing-Groups) for more information.
	BillingGroupId *string `json:"billing_group_id,omitempty"`
}

// NewSelfMailerEditable instantiates a new SelfMailerEditable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelfMailerEditable(to string, inside string, outside string) *SelfMailerEditable {
	this := SelfMailerEditable{}
	this.To = to
	var size SelfMailerSize = SELFMAILERSIZE__6X18_BIFOLD
	this.Size = &size
	var mailType MailType = MAILTYPE_FIRST_CLASS
	this.MailType = &mailType
	this.Inside = inside
	this.Outside = outside
	return &this
}

// NewSelfMailerEditableWithDefaults instantiates a new SelfMailerEditable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelfMailerEditableWithDefaults() *SelfMailerEditable {
	this := SelfMailerEditable{}
	var size SelfMailerSize = SELFMAILERSIZE__6X18_BIFOLD
	this.Size = &size
	var mailType MailType = MAILTYPE_FIRST_CLASS
	this.MailType = &mailType
	return &this
}

// GetTo returns the To field value
func (o *SelfMailerEditable) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *SelfMailerEditable) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *SelfMailerEditable) SetTo(v string) {
	o.To = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *SelfMailerEditable) GetFrom() string {
	if o == nil || o.From == nil {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfMailerEditable) GetFromOk() (*string, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *SelfMailerEditable) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *SelfMailerEditable) SetFrom(v string) {
	o.From = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *SelfMailerEditable) GetSize() SelfMailerSize {
	if o == nil || o.Size == nil {
		var ret SelfMailerSize
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfMailerEditable) GetSizeOk() (*SelfMailerSize, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *SelfMailerEditable) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given SelfMailerSize and assigns it to the Size field.
func (o *SelfMailerEditable) SetSize(v SelfMailerSize) {
	o.Size = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SelfMailerEditable) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SelfMailerEditable) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *SelfMailerEditable) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *SelfMailerEditable) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *SelfMailerEditable) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *SelfMailerEditable) UnsetDescription() {
	o.Description.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SelfMailerEditable) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfMailerEditable) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SelfMailerEditable) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *SelfMailerEditable) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetMailType returns the MailType field value if set, zero value otherwise.
func (o *SelfMailerEditable) GetMailType() MailType {
	if o == nil || o.MailType == nil {
		var ret MailType
		return ret
	}
	return *o.MailType
}

// GetMailTypeOk returns a tuple with the MailType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfMailerEditable) GetMailTypeOk() (*MailType, bool) {
	if o == nil || o.MailType == nil {
		return nil, false
	}
	return o.MailType, true
}

// HasMailType returns a boolean if a field has been set.
func (o *SelfMailerEditable) HasMailType() bool {
	if o != nil && o.MailType != nil {
		return true
	}

	return false
}

// SetMailType gets a reference to the given MailType and assigns it to the MailType field.
func (o *SelfMailerEditable) SetMailType(v MailType) {
	o.MailType = &v
}

// GetMergeVariables returns the MergeVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SelfMailerEditable) GetMergeVariables() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.MergeVariables
}

// GetMergeVariablesOk returns a tuple with the MergeVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SelfMailerEditable) GetMergeVariablesOk() (map[string]interface{}, bool) {
	if o == nil || o.MergeVariables == nil {
		return nil, false
	}
	return o.MergeVariables, true
}

// HasMergeVariables returns a boolean if a field has been set.
func (o *SelfMailerEditable) HasMergeVariables() bool {
	if o != nil && o.MergeVariables != nil {
		return true
	}

	return false
}

// SetMergeVariables gets a reference to the given map[string]interface{} and assigns it to the MergeVariables field.
func (o *SelfMailerEditable) SetMergeVariables(v map[string]interface{}) {
	o.MergeVariables = v
}

// GetSendDate returns the SendDate field value if set, zero value otherwise.
func (o *SelfMailerEditable) GetSendDate() time.Time {
	if o == nil || o.SendDate == nil {
		var ret time.Time
		return ret
	}
	return *o.SendDate
}

// GetSendDateOk returns a tuple with the SendDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfMailerEditable) GetSendDateOk() (*time.Time, bool) {
	if o == nil || o.SendDate == nil {
		return nil, false
	}
	return o.SendDate, true
}

// HasSendDate returns a boolean if a field has been set.
func (o *SelfMailerEditable) HasSendDate() bool {
	if o != nil && o.SendDate != nil {
		return true
	}

	return false
}

// SetSendDate gets a reference to the given time.Time and assigns it to the SendDate field.
func (o *SelfMailerEditable) SetSendDate(v time.Time) {
	o.SendDate = &v
}

// GetInside returns the Inside field value
func (o *SelfMailerEditable) GetInside() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Inside
}

// GetInsideOk returns a tuple with the Inside field value
// and a boolean to check if the value has been set.
func (o *SelfMailerEditable) GetInsideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Inside, true
}

// SetInside sets field value
func (o *SelfMailerEditable) SetInside(v string) {
	o.Inside = v
}

// GetOutside returns the Outside field value
func (o *SelfMailerEditable) GetOutside() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Outside
}

// GetOutsideOk returns a tuple with the Outside field value
// and a boolean to check if the value has been set.
func (o *SelfMailerEditable) GetOutsideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outside, true
}

// SetOutside sets field value
func (o *SelfMailerEditable) SetOutside(v string) {
	o.Outside = v
}

// GetBillingGroupId returns the BillingGroupId field value if set, zero value otherwise.
func (o *SelfMailerEditable) GetBillingGroupId() string {
	if o == nil || o.BillingGroupId == nil {
		var ret string
		return ret
	}
	return *o.BillingGroupId
}

// GetBillingGroupIdOk returns a tuple with the BillingGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfMailerEditable) GetBillingGroupIdOk() (*string, bool) {
	if o == nil || o.BillingGroupId == nil {
		return nil, false
	}
	return o.BillingGroupId, true
}

// HasBillingGroupId returns a boolean if a field has been set.
func (o *SelfMailerEditable) HasBillingGroupId() bool {
	if o != nil && o.BillingGroupId != nil {
		return true
	}

	return false
}

// SetBillingGroupId gets a reference to the given string and assigns it to the BillingGroupId field.
func (o *SelfMailerEditable) SetBillingGroupId(v string) {
	o.BillingGroupId = &v
}

func (o SelfMailerEditable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["to"] = o.To
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.MailType != nil {
		toSerialize["mail_type"] = o.MailType
	}
	if o.MergeVariables != nil {
		toSerialize["merge_variables"] = o.MergeVariables
	}
	if o.SendDate != nil {
		toSerialize["send_date"] = o.SendDate
	}
	if true {
		toSerialize["inside"] = o.Inside
	}
	if true {
		toSerialize["outside"] = o.Outside
	}
	if o.BillingGroupId != nil {
		toSerialize["billing_group_id"] = o.BillingGroupId
	}
	return json.Marshal(toSerialize)
}

type NullableSelfMailerEditable struct {
	value *SelfMailerEditable
	isSet bool
}

func (v NullableSelfMailerEditable) Get() *SelfMailerEditable {
	return v.value
}

func (v *NullableSelfMailerEditable) Set(val *SelfMailerEditable) {
	v.value = val
	v.isSet = true
}

func (v NullableSelfMailerEditable) IsSet() bool {
	return v.isSet
}

func (v *NullableSelfMailerEditable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelfMailerEditable(val *SelfMailerEditable) *NullableSelfMailerEditable {
	return &NullableSelfMailerEditable{value: val, isSet: true}
}

func (v NullableSelfMailerEditable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelfMailerEditable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


