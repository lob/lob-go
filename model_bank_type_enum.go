/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
	"fmt"
)

// BankTypeEnum The type of entity that holds the account.
type BankTypeEnum string

// List of bank_type_enum
const (
	BANKTYPEENUM_COMPANY BankTypeEnum = "company"
	BANKTYPEENUM_INDIVIDUAL BankTypeEnum = "individual"
)

// All allowed values of BankTypeEnum enum
var AllowedBankTypeEnumEnumValues = []BankTypeEnum{
	"company",
	"individual",
}

func (v *BankTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BankTypeEnum(value)
	for _, existing := range AllowedBankTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BankTypeEnum", value)
}

// NewBankTypeEnumFromValue returns a pointer to a valid BankTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBankTypeEnumFromValue(v string) (*BankTypeEnum, error) {
	ev := BankTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BankTypeEnum: valid values are %v", v, AllowedBankTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BankTypeEnum) IsValid() bool {
	for _, existing := range AllowedBankTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to bank_type_enum value
func (v BankTypeEnum) Ptr() *BankTypeEnum {
	return &v
}

type NullableBankTypeEnum struct {
	value *BankTypeEnum
	isSet bool
}

func (v NullableBankTypeEnum) Get() *BankTypeEnum {
	return v.value
}

func (v *NullableBankTypeEnum) Set(val *BankTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableBankTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableBankTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankTypeEnum(val *BankTypeEnum) *NullableBankTypeEnum {
	return &NullableBankTypeEnum{value: val, isSet: true}
}

func (v NullableBankTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

