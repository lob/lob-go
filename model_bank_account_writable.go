/*
Lob

The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

API version: 1.3.0
Contact: lob-openapi@lob.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lob

import (
	"encoding/json"
	
)

// BankAccountWritable struct for BankAccountWritable
type BankAccountWritable struct {
	// An internal description that identifies this resource. Must be no longer than 255 characters. 
	Description NullableString `json:"description,omitempty"`
	// Must be a [valid US routing number](https://www.frbservices.org/index.html).
	RoutingNumber string `json:"routing_number"`
	AccountNumber string `json:"account_number"`
	AccountType BankTypeEnum `json:"account_type"`
	// The signatory associated with your account. This name will be printed on checks created with this bank account. If you prefer to use a custom signature image on your checks instead, please create your bank account from the [Dashboard](https://dashboard.lob.com/#/login).
	Signatory string `json:"signatory"`
	// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters `\"` and `\\`. i.e. '{\"customer_id\" : \"NEWYORK2015\"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
	Metadata *map[string]string `json:"metadata,omitempty"`
}

// NewBankAccountWritable instantiates a new BankAccountWritable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankAccountWritable(routingNumber string, accountNumber string, accountType BankTypeEnum, signatory string) *BankAccountWritable {
	this := BankAccountWritable{}
	this.RoutingNumber = routingNumber
	this.AccountNumber = accountNumber
	this.AccountType = accountType
	this.Signatory = signatory
	return &this
}

// NewBankAccountWritableWithDefaults instantiates a new BankAccountWritable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankAccountWritableWithDefaults() *BankAccountWritable {
	this := BankAccountWritable{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BankAccountWritable) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BankAccountWritable) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *BankAccountWritable) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *BankAccountWritable) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *BankAccountWritable) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *BankAccountWritable) UnsetDescription() {
	o.Description.Unset()
}

// GetRoutingNumber returns the RoutingNumber field value
func (o *BankAccountWritable) GetRoutingNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoutingNumber
}

// GetRoutingNumberOk returns a tuple with the RoutingNumber field value
// and a boolean to check if the value has been set.
func (o *BankAccountWritable) GetRoutingNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoutingNumber, true
}

// SetRoutingNumber sets field value
func (o *BankAccountWritable) SetRoutingNumber(v string) {
	o.RoutingNumber = v
}

// GetAccountNumber returns the AccountNumber field value
func (o *BankAccountWritable) GetAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value
// and a boolean to check if the value has been set.
func (o *BankAccountWritable) GetAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNumber, true
}

// SetAccountNumber sets field value
func (o *BankAccountWritable) SetAccountNumber(v string) {
	o.AccountNumber = v
}

// GetAccountType returns the AccountType field value
func (o *BankAccountWritable) GetAccountType() BankTypeEnum {
	if o == nil {
		var ret BankTypeEnum
		return ret
	}

	return o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value
// and a boolean to check if the value has been set.
func (o *BankAccountWritable) GetAccountTypeOk() (*BankTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountType, true
}

// SetAccountType sets field value
func (o *BankAccountWritable) SetAccountType(v BankTypeEnum) {
	o.AccountType = v
}

// GetSignatory returns the Signatory field value
func (o *BankAccountWritable) GetSignatory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signatory
}

// GetSignatoryOk returns a tuple with the Signatory field value
// and a boolean to check if the value has been set.
func (o *BankAccountWritable) GetSignatoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signatory, true
}

// SetSignatory sets field value
func (o *BankAccountWritable) SetSignatory(v string) {
	o.Signatory = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *BankAccountWritable) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountWritable) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *BankAccountWritable) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *BankAccountWritable) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

func (o BankAccountWritable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["routing_number"] = o.RoutingNumber
	}
	if true {
		toSerialize["account_number"] = o.AccountNumber
	}
	if true {
		toSerialize["account_type"] = o.AccountType
	}
	if true {
		toSerialize["signatory"] = o.Signatory
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableBankAccountWritable struct {
	value *BankAccountWritable
	isSet bool
}

func (v NullableBankAccountWritable) Get() *BankAccountWritable {
	return v.value
}

func (v *NullableBankAccountWritable) Set(val *BankAccountWritable) {
	v.value = val
	v.isSet = true
}

func (v NullableBankAccountWritable) IsSet() bool {
	return v.isSet
}

func (v *NullableBankAccountWritable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankAccountWritable(val *BankAccountWritable) *NullableBankAccountWritable {
	return &NullableBankAccountWritable{value: val, isSet: true}
}

func (v NullableBankAccountWritable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankAccountWritable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


